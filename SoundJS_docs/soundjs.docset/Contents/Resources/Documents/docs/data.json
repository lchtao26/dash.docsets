{
    "project": {
        "name": "SoundJS",
        "version": "1.0.0",
        "description": "SoundJS Docs",
        "url": "http://www.createjs.com/soundjs",
        "logo": "assets/docs-icon-SoundJS.png"
    },
    "files": {
        "createjs/events/ErrorEvent.js": {
            "name": "createjs/events/ErrorEvent.js",
            "modules": {},
            "classes": {
                "ErrorEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "createjs/events/Event.js": {
            "name": "createjs/events/Event.js",
            "modules": {
                "CreateJS": 1
            },
            "classes": {
                "Event": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "createjs/events/EventDispatcher.js": {
            "name": "createjs/events/EventDispatcher.js",
            "modules": {},
            "classes": {
                "EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "createjs/utils/BrowserDetect.js": {
            "name": "createjs/utils/BrowserDetect.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "createjs/utils/deprecate.js": {
            "name": "createjs/utils/deprecate.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "createjs/utils/extend.js": {
            "name": "createjs/utils/extend.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "createjs/utils/indexOf.js": {
            "name": "createjs/utils/indexOf.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "createjs/utils/promote.js": {
            "name": "createjs/utils/promote.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "createjs/utils/proxy.js": {
            "name": "createjs/utils/proxy.js",
            "modules": {},
            "classes": {
                "Utility Methods": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/cordovaaudio/CordovaAudioLoader.js": {
            "name": "soundjs/cordovaaudio/CordovaAudioLoader.js",
            "modules": {},
            "classes": {
                "CordovaAudioLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/cordovaaudio/CordovaAudioPlugin.js": {
            "name": "soundjs/cordovaaudio/CordovaAudioPlugin.js",
            "modules": {},
            "classes": {
                "CordovaAudioPlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/cordovaaudio/CordovaAudioSoundInstance.js": {
            "name": "soundjs/cordovaaudio/CordovaAudioSoundInstance.js",
            "modules": {},
            "classes": {
                "CordovaAudioSoundInstance": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/data/AudioSprite.js": {
            "name": "soundjs/data/AudioSprite.js",
            "modules": {},
            "classes": {
                "AudioSprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/data/PlayPropsConfig.js": {
            "name": "soundjs/data/PlayPropsConfig.js",
            "modules": {},
            "classes": {
                "PlayPropsConfig": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/flashaudio/FlashAudioLoader.js": {
            "name": "soundjs/flashaudio/FlashAudioLoader.js",
            "modules": {},
            "classes": {
                "FlashAudioLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/flashaudio/FlashAudioPlugin.js": {
            "name": "soundjs/flashaudio/FlashAudioPlugin.js",
            "modules": {},
            "classes": {
                "FlashAudioPlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/flashaudio/FlashAudioSoundInstance.js": {
            "name": "soundjs/flashaudio/FlashAudioSoundInstance.js",
            "modules": {},
            "classes": {
                "FlashAudioSoundInstance": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/htmlaudio/HTMLAudioPlugin.js": {
            "name": "soundjs/htmlaudio/HTMLAudioPlugin.js",
            "modules": {},
            "classes": {
                "HTMLAudioPlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/htmlaudio/HTMLAudioSoundInstance.js": {
            "name": "soundjs/htmlaudio/HTMLAudioSoundInstance.js",
            "modules": {},
            "classes": {
                "HTMLAudioSoundInstance": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/htmlaudio/HTMLAudioTagPool.js": {
            "name": "soundjs/htmlaudio/HTMLAudioTagPool.js",
            "modules": {},
            "classes": {
                "HTMLAudioTagPool": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/webaudio/WebAudioLoader.js": {
            "name": "soundjs/webaudio/WebAudioLoader.js",
            "modules": {},
            "classes": {
                "WebAudioLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/webaudio/WebAudioPlugin.js": {
            "name": "soundjs/webaudio/WebAudioPlugin.js",
            "modules": {},
            "classes": {
                "WebAudioPlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/webaudio/WebAudioSoundInstance.js": {
            "name": "soundjs/webaudio/WebAudioSoundInstance.js",
            "modules": {},
            "classes": {
                "WebAudioSoundInstance": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/AbstractPlugin.js": {
            "name": "soundjs/AbstractPlugin.js",
            "modules": {},
            "classes": {
                "AbstractPlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/AbstractSoundInstance.js": {
            "name": "soundjs/AbstractSoundInstance.js",
            "modules": {},
            "classes": {
                "AbstractSoundInstance": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/Sound.js": {
            "name": "soundjs/Sound.js",
            "modules": {
                "SoundJS": 1
            },
            "classes": {
                "Sound": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/version.js": {
            "name": "soundjs/version.js",
            "modules": {},
            "classes": {
                "SoundJS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "soundjs/version_cordovaplugin.js": {
            "name": "soundjs/version_cordovaplugin.js",
            "modules": {},
            "classes": {},
            "fors": {
                "CordovaAudioPlugin": 1
            },
            "namespaces": {}
        },
        "soundjs/version_flashplugin.js": {
            "name": "soundjs/version_flashplugin.js",
            "modules": {},
            "classes": {},
            "fors": {
                "FlashAudioPlugin": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "CreateJS": {
            "name": "CreateJS",
            "submodules": {},
            "classes": {
                "ErrorEvent": 1,
                "Event": 1,
                "EventDispatcher": 1,
                "Utility Methods": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "createjs/utils/proxy.js",
            "line": 36,
            "description": "A collection of Classes that are shared across all the CreateJS libraries.  The classes are included in the minified\nfiles of each library and are available on the createjs namespace directly.\n\n<h4>Example</h4>\n\n     myObject.addEventListener(\"change\", createjs.proxy(myMethod, scope));",
            "itemtype": "main"
        },
        "SoundJS": {
            "name": "SoundJS",
            "submodules": {},
            "classes": {
                "CordovaAudioLoader": 1,
                "CordovaAudioPlugin": 1,
                "CordovaAudioSoundInstance": 1,
                "AudioSprite": 1,
                "PlayPropsConfig": 1,
                "FlashAudioLoader": 1,
                "FlashAudioPlugin": 1,
                "FlashAudioSoundInstance": 1,
                "HTMLAudioPlugin": 1,
                "HTMLAudioSoundInstance": 1,
                "HTMLAudioTagPool": 1,
                "WebAudioLoader": 1,
                "WebAudioPlugin": 1,
                "WebAudioSoundInstance": 1,
                "AbstractPlugin": 1,
                "AbstractSoundInstance": 1,
                "Sound": 1,
                "SoundJS": 1
            },
            "fors": {
                "CordovaAudioPlugin": 1,
                "FlashAudioPlugin": 1
            },
            "namespaces": {},
            "tag": "main",
            "file": "soundjs/version.js",
            "line": 8,
            "description": "The SoundJS library manages the playback of audio on the web. It works via plugins which abstract the actual audio\nimplementation, so playback is possible on any platform without specific knowledge of what mechanisms are necessary\nto play sounds.\n\nTo use SoundJS, use the public API on the {{#crossLink \"Sound\"}}{{/crossLink}} class. This API is for:\n<ul>\n     <li>Installing audio playback Plugins</li>\n     <li>Registering (and preloading) sounds</li>\n     <li>Creating and playing sounds</li>\n     <li>Master volume, mute, and stop controls for all sounds at once</li>\n</ul>\n\n<b>Controlling Sounds</b><br />\nPlaying sounds creates {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} instances, which can be controlled\nindividually.\n<ul>\n     <li>Pause, resume, seek, and stop sounds</li>\n     <li>Control a sound's volume, mute, and pan</li>\n     <li>Listen for events on sound instances to get notified when they finish, loop, or fail</li>\n</ul>\n\n<h4>Example</h4>\n\n     createjs.Sound.alternateExtensions = [\"mp3\"];\n     createjs.Sound.on(\"fileload\", this.loadHandler, this);\n     createjs.Sound.registerSound(\"path/to/mySound.ogg\", \"sound\");\n     function loadHandler(event) {\n         // This is fired for each sound that is registered.\n         var instance = createjs.Sound.play(\"sound\");  // play using id.  Could also use full sourcepath or event.src.\n         instance.on(\"complete\", this.handleComplete, this);\n         instance.volume = 0.5;\n     }\n\n<h4>Browser Support</h4>\nAudio will work in browsers which support Web Audio (<a href=\"http://caniuse.com/audio-api\" target=\"_blank\">http://caniuse.com/audio-api</a>)\nor HTMLAudioElement (<a href=\"http://caniuse.com/audio\" target=\"_blank\">http://caniuse.com/audio</a>).\nA Flash fallback can be used for any browser that supports the Flash player, and the Cordova plugin can be used in\nany webview that supports <a href=\"http://plugins.cordova.io/#/package/org.apache.cordova.media\" target=\"_blank\">Cordova.Media</a>.\nIE8 and earlier are not supported, even with the Flash fallback. To support earlier browsers, you can use an older\nversion of SoundJS (version 0.5.2 and earlier).",
            "itemtype": "main"
        }
    },
    "classes": {
        "ErrorEvent": {
            "name": "ErrorEvent",
            "shortname": "ErrorEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CreateJS",
            "namespace": "",
            "file": "createjs/events/ErrorEvent.js",
            "line": 39,
            "description": "A general error {{#crossLink \"Event\"}}{{/crossLink}}, that describes an error that occurred, as well as any details.",
            "params": [
                {
                    "name": "title",
                    "description": "The error title",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "message",
                    "description": "The error description",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "Additional error data",
                    "type": "Object",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "Event": {
            "name": "Event",
            "shortname": "Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CreateJS",
            "namespace": "",
            "file": "createjs/events/Event.js",
            "line": 48,
            "description": "Contains properties and methods shared by all events for use with\n{{#crossLink \"EventDispatcher\"}}{{/crossLink}}.\n\nNote that Event objects are often reused, so you should never\nrely on an event object's state outside of the call stack it was received in.",
            "params": [
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "bubbles",
                    "description": "Indicates whether the event will bubble through the display list.",
                    "type": "Boolean"
                },
                {
                    "name": "cancelable",
                    "description": "Indicates whether the default behaviour of this event can be cancelled.",
                    "type": "Boolean"
                }
            ],
            "is_constructor": 1
        },
        "EventDispatcher": {
            "name": "EventDispatcher",
            "shortname": "EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Sound"
            ],
            "module": "CreateJS",
            "namespace": "",
            "file": "createjs/events/EventDispatcher.js",
            "line": 41,
            "description": "EventDispatcher provides methods for managing queues of event listeners and dispatching events.\n\nYou can either extend EventDispatcher or mix its methods into an existing prototype or instance by using the\nEventDispatcher {{#crossLink \"EventDispatcher/initialize\"}}{{/crossLink}} method.\n\nTogether with the CreateJS Event class, EventDispatcher provides an extended event model that is based on the\nDOM Level 2 event model, including addEventListener, removeEventListener, and dispatchEvent. It supports\nbubbling / capture, preventDefault, stopPropagation, stopImmediatePropagation, and handleEvent.\n\nEventDispatcher also exposes a {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} method, which makes it easier\nto create scoped listeners, listeners that only run once, and listeners with associated arbitrary data. The \n{{#crossLink \"EventDispatcher/off\"}}{{/crossLink}} method is merely an alias to\n{{#crossLink \"EventDispatcher/removeEventListener\"}}{{/crossLink}}.\n\nAnother addition to the DOM Level 2 model is the {{#crossLink \"EventDispatcher/removeAllEventListeners\"}}{{/crossLink}}\nmethod, which can be used to listeners for all events, or listeners for a specific event. The Event object also \nincludes a {{#crossLink \"Event/remove\"}}{{/crossLink}} method which removes the active listener.\n\n<h4>Example</h4>\nAdd EventDispatcher capabilities to the \"MyClass\" class.\n\n     EventDispatcher.initialize(MyClass.prototype);\n\nAdd an event (see {{#crossLink \"EventDispatcher/addEventListener\"}}{{/crossLink}}).\n\n     instance.addEventListener(\"eventName\", handlerMethod);\n     function handlerMethod(event) {\n         console.log(event.target + \" Was Clicked\");\n     }\n\n<b>Maintaining proper scope</b><br />\nScope (ie. \"this\") can be be a challenge with events. Using the {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}}\nmethod to subscribe to events simplifies this.\n\n     instance.addEventListener(\"click\", function(event) {\n         console.log(instance == this); // false, scope is ambiguous.\n     });\n     \n     instance.on(\"click\", function(event) {\n         console.log(instance == this); // true, \"on\" uses dispatcher scope by default.\n     });\n\nIf you want to use addEventListener instead, you may want to use function.bind() or a similar proxy to manage\nscope.\n\n<b>Browser support</b>\nThe event model in CreateJS can be used separately from the suite in any project, however the inheritance model\nrequires modern browsers (IE9+).",
            "is_constructor": 1
        },
        "Utility Methods": {
            "name": "Utility Methods",
            "shortname": "Utility Methods",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CreateJS",
            "namespace": "",
            "file": "createjs/utils/proxy.js",
            "line": 36,
            "description": "Various utilities that the CreateJS Suite uses. Utilities are created as separate files, and will be available on the\ncreatejs namespace directly.\n\n<h4>Example</h4>\n\n     myObject.addEventListener(\"change\", createjs.proxy(myMethod, scope));",
            "mainName": "Utility Methods",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "CordovaAudioLoader": {
            "name": "CordovaAudioLoader",
            "shortname": "CordovaAudioLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/cordovaaudio/CordovaAudioLoader.js",
            "line": 40,
            "description": "Loader provides a mechanism to preload Cordova audio content via PreloadJS or internally. Instances are returned to\nthe preloader, and the load method is called when the asset needs to be requested.\nCurrently files are assumed to be local and no loading actually takes place.  This class exists to more easily support\nthe existing architecture.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "The item to be loaded",
                    "type": "String"
                }
            ],
            "extends": "XHRRequest",
            "access": "protected",
            "tagname": ""
        },
        "CordovaAudioPlugin": {
            "name": "CordovaAudioPlugin",
            "shortname": "CordovaAudioPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/cordovaaudio/CordovaAudioPlugin.js",
            "line": 41,
            "description": "Play sounds using Cordova Media plugin, which will work with a Cordova app and tools that utilize Cordova such as PhoneGap or Ionic.\nThis plugin is not used by default, and must be registered manually in {{#crossLink \"Sound\"}}{{/crossLink}}\nusing the {{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} method.\nThis plugin is recommended when building a Cordova based app, but is not required.\n\n<b>NOTE the <a href=\"http://plugins.cordova.io/#/package/org.apache.cordova.media\" target=\"_blank\">Cordova Media plugin</a> is required</b>\n\n\t\tcordova plugin add org.apache.cordova.media\n\n<h4>Known Issues</h4>\n<b>Audio Position</b>\n<ul>Audio position is calculated asynchronusly by Media.  The SoundJS solution to this problem is two-fold:\n<li>Provide {{#crossLink \"CordovaAudioSoundInstance/getCurrentPosition\"}}{{/crossLink}} that maps directly to media.getCurrentPosition.</li>\n<li>Provide a best guess position based on elapsed time since playback started, which is synchronized with actual position when the audio is paused or stopped.\nTesting showed this to be fairly reliable within 200ms.</li></ul>\n<b>Cordova Media Docs</b>\n<ul><li>See the <a href=\"http://plugins.cordova.io/#/package/org.apache.cordova.media\" target=\"_blank\">Cordova Media Docs</a> for various known OS issues.</li></ul>\n<br />",
            "extends": "AbstractPlugin",
            "is_constructor": 1
        },
        "CordovaAudioSoundInstance": {
            "name": "CordovaAudioSoundInstance",
            "shortname": "CordovaAudioSoundInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/cordovaaudio/CordovaAudioSoundInstance.js",
            "line": 40,
            "description": "CordovaAudioSoundInstance extends the base api of {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} and is used by\n{{#crossLink \"CordovaAudioPlugin\"}}{{/crossLink}}.",
            "params": [
                {
                    "name": "src",
                    "description": "The path to and file name of the sound.",
                    "type": "String"
                },
                {
                    "name": "startTime",
                    "description": "Audio sprite property used to apply an offset, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "Audio sprite property used to set the time the clip plays for, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "playbackResource",
                    "description": "Any resource needed by plugin to support audio playback.",
                    "type": "Object"
                }
            ],
            "extends": "AbstractSoundInstance",
            "is_constructor": 1
        },
        "AudioSprite": {
            "name": "AudioSprite",
            "shortname": "AudioSprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/data/AudioSprite.js",
            "line": 6,
            "description": "<strong>Note: AudioSprite is not a class, but its usage is easily lost in the documentation, so it has been called\nout here for quick reference.</strong>\n\nAudio sprites are much like CSS sprites or image sprite sheets: multiple audio assets grouped into a single file.\nAudio sprites work around limitations in certain browsers, where only a single sound can be loaded and played at a\ntime. We recommend at least 300ms of silence between audio clips to deal with HTML audio tag inaccuracy, and to prevent\naccidentally playing bits of the neighbouring clips.\n\n<strong>Benefits of Audio Sprites:</strong>\n<ul>\n    <li>More robust support for older browsers and devices that only allow a single audio instance, such as iOS 5.</li>\n    <li>They provide a work around for the Internet Explorer 9 audio tag limit, which restricts how many different\n    sounds that could be loaded at once.</li>\n    <li>Faster loading by only requiring a single network request for several sounds, especially on mobile devices\nwhere the network round trip for each file can add significant latency.</li>\n</ul>\n\n<strong>Drawbacks of Audio Sprites</strong>\n<ul>\n    <li>No guarantee of smooth looping when using HTML or Flash audio. If you have a track that needs to loop\n\t\tsmoothly and you are supporting non-web audio browsers, do not use audio sprites for that sound if you can avoid\n\t\tit.</li>\n    <li>No guarantee that HTML audio will play back immediately, especially the first time. In some browsers\n    (Chrome!), HTML audio will only load enough to play through at the current download speed – so we rely on the\n    `canplaythrough` event to determine if the audio is loaded. Since audio sprites must jump ahead to play specific\n    sounds, the audio may not yet have downloaded fully.</li>\n    <li>Audio sprites share the same core source, so if you have a sprite with 5 sounds and are limited to 2\n\t\tconcurrently playing instances, you can only play 2 of the sounds at the same time.</li>\n</ul>\n\n<h4>Example</h4>\n\n\t\tcreatejs.Sound.initializeDefaultPlugins();\n\t\tvar assetsPath = \"./assets/\";\n\t\tvar sounds = [{\n\t\t\tsrc:\"MyAudioSprite.ogg\", data: {\n\t\t\t\taudioSprite: [\n\t\t\t\t\t{id:\"sound1\", startTime:0, duration:500},\n\t\t\t\t\t{id:\"sound2\", startTime:1000, duration:400},\n\t\t\t\t\t{id:\"sound3\", startTime:1700, duration: 1000}\n\t\t\t\t]}\n\t\t\t}\n\t\t];\n\t\tcreatejs.Sound.alternateExtensions = [\"mp3\"];\n\t\tcreatejs.Sound.on(\"fileload\", loadSound);\n\t\tcreatejs.Sound.registerSounds(sounds, assetsPath);\n\t\t// after load is complete\n\t\tcreatejs.Sound.play(\"sound2\");\n\nYou can also create audio sprites on the fly by setting the startTime and duration when creating an new AbstractSoundInstance.\n\n\t\tcreatejs.Sound.play(\"MyAudioSprite\", {startTime: 1000, duration: 400});\n\nThe excellent CreateJS community has created a tool to create audio sprites, available at\n<a href=\"https://github.com/tonistiigi/audiosprite\" target=\"_blank\">https://github.com/tonistiigi/audiosprite</a>,\nas well as a <a href=\"http://jsfiddle.net/bharat_battu/g8fFP/12/\" target=\"_blank\">jsfiddle</a> to convert the output\nto SoundJS format.",
            "since": "0.6.0"
        },
        "PlayPropsConfig": {
            "name": "PlayPropsConfig",
            "shortname": "PlayPropsConfig",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/data/PlayPropsConfig.js",
            "line": 39,
            "description": "A class to store the optional play properties passed in {{#crossLink \"Sound/play\"}}{{/crossLink}} and\n{{#crossLink \"AbstractSoundInstance/play\"}}{{/crossLink}} calls.\n\nOptional Play Properties Include:\n<ul>\n<li>interrupt - How to interrupt any currently playing instances of audio with the same source,\nif the maximum number of instances of the sound are already playing. Values are defined as <code>INTERRUPT_TYPE</code>\nconstants on the Sound class, with the default defined by {{#crossLink \"Sound/defaultInterruptBehavior:property\"}}{{/crossLink}}.</li>\n<li>delay - The amount of time to delay the start of audio playback, in milliseconds.</li>\n<li>offset - The offset from the start of the audio to begin playback, in milliseconds.</li>\n<li>loop - How many times the audio loops when it reaches the end of playback. The default is 0 (no\nloops), and -1 can be used for infinite playback.</li>\n<li>volume - The volume of the sound, between 0 and 1. Note that the master volume is applied\nagainst the individual volume.</li>\n<li>pan - The left-right pan of the sound (if supported), between -1 (left) and 1 (right).</li>\n<li>startTime - To create an audio sprite (with duration), the initial offset to start playback and loop from, in milliseconds.</li>\n<li>duration - To create an audio sprite (with startTime), the amount of time to play the clip for, in milliseconds.</li>\n</ul>\n\n<h4>Example</h4>\n\n\tvar props = new createjs.PlayPropsConfig().set({interrupt: createjs.Sound.INTERRUPT_ANY, loop: -1, volume: 0.5})\n\tcreatejs.Sound.play(\"mySound\", props);\n\t// OR\n\tmySoundInstance.play(props);",
            "is_constructor": 1,
            "since": "0.6.1"
        },
        "FlashAudioLoader": {
            "name": "FlashAudioLoader",
            "shortname": "FlashAudioLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/flashaudio/FlashAudioLoader.js",
            "line": 40,
            "description": "Loader provides a mechanism to preload Flash content via PreloadJS or internally. Instances are returned to\nthe preloader, and the load method is called when the asset needs to be requested.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "The item to be loaded",
                    "type": "String"
                },
                {
                    "name": "flash",
                    "description": "The flash instance that will do the preloading.",
                    "type": "Object"
                }
            ],
            "extends": "AbstractLoader",
            "access": "protected",
            "tagname": ""
        },
        "FlashAudioPlugin": {
            "name": "FlashAudioPlugin",
            "shortname": "FlashAudioPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 41,
            "description": "Play sounds using a Flash instance. This plugin is not used by default, and must be registered manually in\n{{#crossLink \"Sound\"}}{{/crossLink}} using the {{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} method. This\nplugin is recommended to be included if sound support is required in older browsers such as IE8.\n\nThis plugin requires FlashAudioPlugin.swf and swfObject.js, which is compiled\ninto the minified FlashAudioPlugin-X.X.X.min.js file. You must ensure that {{#crossLink \"FlashAudioPlugin/swfPath:property\"}}{{/crossLink}}\nis set when using this plugin, so that the script can find the swf.\n\n<h4>Example</h4>\n\n     createjs.FlashAudioPlugin.swfPath = \"../src/soundjs/flashaudio\";\n     createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin, createjs.FlashAudioPlugin]);\n     // Adds FlashAudioPlugin as a fallback if WebAudio and HTMLAudio do not work.\n\nNote that the SWF is embedded into a container DIV (with an id and classname of \"SoundJSFlashContainer\"), and\nwill have an id of \"flashAudioContainer\". The container DIV is positioned 1 pixel off-screen to the left to avoid\nshowing the 1x1 pixel white square.\n\n<h4>Known Browser and OS issues for Flash Audio</h4>\n<b>All browsers</b><br />\n<ul><li> There can be a delay in flash player starting playback of audio.  This has been most noticeable in Firefox.\nUnfortunely this is an issue with the flash player and the browser and therefore cannot be addressed by SoundJS.</li></ul>",
            "extends": "AbstractPlugin",
            "is_constructor": 1
        },
        "FlashAudioSoundInstance": {
            "name": "FlashAudioSoundInstance",
            "shortname": "FlashAudioSoundInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/flashaudio/FlashAudioSoundInstance.js",
            "line": 40,
            "description": "FlashAudioSoundInstance extends the base api of {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} and is used by\n{{#crossLink \"FlashAudioPlugin\"}}{{/crossLink}}.\n\nNOTE audio control is shuttled to a flash player instance via the flash reference.",
            "params": [
                {
                    "name": "src",
                    "description": "The path to and file name of the sound.",
                    "type": "String"
                },
                {
                    "name": "startTime",
                    "description": "Audio sprite property used to apply an offset, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "Audio sprite property used to set the time the clip plays for, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "playbackResource",
                    "description": "Any resource needed by plugin to support audio playback.",
                    "type": "Object"
                }
            ],
            "extends": "AbstractSoundInstance",
            "is_constructor": 1
        },
        "HTMLAudioPlugin": {
            "name": "HTMLAudioPlugin",
            "shortname": "HTMLAudioPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/htmlaudio/HTMLAudioPlugin.js",
            "line": 41,
            "description": "Play sounds using HTML &lt;audio&gt; tags in the browser. This plugin is the second priority plugin installed\nby default, after the {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}.  For older browsers that do not support html\naudio, include and install the {{#crossLink \"FlashAudioPlugin\"}}{{/crossLink}}.\n\n<h4>Known Browser and OS issues for HTML Audio</h4>\n<b>All browsers</b><br />\nTesting has shown in all browsers there is a limit to how many audio tag instances you are allowed.  If you exceed\nthis limit, you can expect to see unpredictable results. Please use {{#crossLink \"Sound.MAX_INSTANCES\"}}{{/crossLink}} as\na guide to how many total audio tags you can safely use in all browsers.  This issue is primarily limited to IE9.\n\n<b>IE html limitations</b><br />\n<ul><li>There is a delay in applying volume changes to tags that occurs once playback is started. So if you have\nmuted all sounds, they will all play during this delay until the mute applies internally. This happens regardless of\nwhen or how you apply the volume change, as the tag seems to need to play to apply it.</li>\n<li>MP3 encoding will not always work for audio tags if it's not default.  We've found default encoding with\n64kbps works.</li>\n<li>Occasionally very short samples will get cut off.</li>\n<li>There is a limit to how many audio tags you can load or play at once, which appears to be determined by\nhardware and browser settings.  See {{#crossLink \"HTMLAudioPlugin.MAX_INSTANCES\"}}{{/crossLink}} for a safe estimate.\nNote that audio sprites can be used as a solution to this issue.</li></ul>\n\n<b>Safari limitations</b><br />\n<ul><li>Safari requires Quicktime to be installed for audio playback.</li></ul>\n\n<b>iOS 6 limitations</b><br />\n<ul><li>can only have one &lt;audio&gt; tag</li>\n\t\t<li>can not preload or autoplay the audio</li>\n\t\t<li>can not cache the audio</li>\n\t\t<li>can not play the audio except inside a user initiated event.</li>\n\t\t<li>Note it is recommended to use {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} for iOS (6+)</li>\n\t\t<li>audio sprites can be used to mitigate some of these issues and are strongly recommended on iOS</li>\n</ul>\n\n<b>Android Native Browser limitations</b><br />\n<ul><li>We have no control over audio volume. Only the user can set volume on their device.</li>\n     <li>We can only play audio inside a user event (touch/click).  This currently means you cannot loop sound or use a delay.</li></ul>\n<b> Android Chrome 26.0.1410.58 specific limitations</b><br />\n<ul> <li>Can only play 1 sound at a time.</li>\n     <li>Sound is not cached.</li>\n     <li>Sound can only be loaded in a user initiated touch/click event.</li>\n     <li>There is a delay before a sound is played, presumably while the src is loaded.</li>\n</ul>\n\nSee {{#crossLink \"Sound\"}}{{/crossLink}} for general notes on known issues.",
            "extends": "AbstractPlugin",
            "is_constructor": 1
        },
        "HTMLAudioSoundInstance": {
            "name": "HTMLAudioSoundInstance",
            "shortname": "HTMLAudioSoundInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/htmlaudio/HTMLAudioSoundInstance.js",
            "line": 40,
            "description": "HTMLAudioSoundInstance extends the base api of {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} and is used by\n{{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}.",
            "params": [
                {
                    "name": "src",
                    "description": "The path to and file name of the sound.",
                    "type": "String"
                },
                {
                    "name": "startTime",
                    "description": "Audio sprite property used to apply an offset, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "Audio sprite property used to set the time the clip plays for, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "playbackResource",
                    "description": "Any resource needed by plugin to support audio playback.",
                    "type": "Object"
                }
            ],
            "extends": "AbstractSoundInstance",
            "is_constructor": 1
        },
        "HTMLAudioTagPool": {
            "name": "HTMLAudioTagPool",
            "shortname": "HTMLAudioTagPool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/htmlaudio/HTMLAudioTagPool.js",
            "line": 40,
            "description": "HTMLAudioTagPool is an object pool for HTMLAudio tag instances.",
            "params": [
                {
                    "name": "src",
                    "description": "The source of the channel.",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": ""
        },
        "WebAudioLoader": {
            "name": "WebAudioLoader",
            "shortname": "WebAudioLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/webaudio/WebAudioLoader.js",
            "line": 40,
            "description": "Loader provides a mechanism to preload Web Audio content via PreloadJS or internally. Instances are returned to\nthe preloader, and the load method is called when the asset needs to be requested.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "The item to be loaded",
                    "type": "String"
                }
            ],
            "extends": "XHRRequest",
            "access": "protected",
            "tagname": ""
        },
        "WebAudioPlugin": {
            "name": "WebAudioPlugin",
            "shortname": "WebAudioPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 41,
            "description": "Play sounds using Web Audio in the browser. The WebAudioPlugin is currently the default plugin, and will be used\nanywhere that it is supported. To change plugin priority, check out the Sound API\n{{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} method.\n\n<h4>Known Browser and OS issues for Web Audio</h4>\n<b>Firefox 25</b>\n<li>\n    mp3 audio files do not load properly on all windows machines, reported <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=929969\" target=\"_blank\">here</a>.\n    <br />For this reason it is recommended to pass another FireFox-supported type (i.e. ogg) as the default\n    extension, until this bug is resolved\n</li>\n\n<b>Webkit (Chrome and Safari)</b>\n<li>\n    AudioNode.disconnect does not always seem to work.  This can cause the file size to grow over time if you\n\t   are playing a lot of audio files.\n</li>\n\n<b>iOS 6 limitations</b>\n<ul>\n    <li>\n        Sound is initially muted and will only unmute through play being called inside a user initiated event\n        (touch/click). Please read the mobile playback notes in the the {{#crossLink \"Sound\"}}{{/crossLink}}\n        class for a full overview of the limitations, and how to get around them.\n    </li>\n\t   <li>\n\t       A bug exists that will distort un-cached audio when a video element is present in the DOM. You can avoid\n\t       this bug by ensuring the audio and video audio share the same sample rate.\n\t   </li>\n</ul>",
            "extends": "AbstractPlugin",
            "is_constructor": 1,
            "since": "0.4.0"
        },
        "WebAudioSoundInstance": {
            "name": "WebAudioSoundInstance",
            "shortname": "WebAudioSoundInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/webaudio/WebAudioSoundInstance.js",
            "line": 37,
            "description": "WebAudioSoundInstance extends the base api of {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} and is used by\n{{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}.\n\nWebAudioSoundInstance exposes audioNodes for advanced users.",
            "params": [
                {
                    "name": "src",
                    "description": "The path to and file name of the sound.",
                    "type": "String"
                },
                {
                    "name": "startTime",
                    "description": "Audio sprite property used to apply an offset, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "Audio sprite property used to set the time the clip plays for, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "playbackResource",
                    "description": "Any resource needed by plugin to support audio playback.",
                    "type": "Object"
                }
            ],
            "extends": "AbstractSoundInstance",
            "is_constructor": 1
        },
        "AbstractPlugin": {
            "name": "AbstractPlugin",
            "shortname": "AbstractPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/AbstractPlugin.js",
            "line": 38,
            "description": "A default plugin class used as a base for all other plugins.",
            "is_constructor": 1,
            "since": "0.6.0"
        },
        "AbstractSoundInstance": {
            "name": "AbstractSoundInstance",
            "shortname": "AbstractSoundInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 33,
            "description": "A AbstractSoundInstance is created when any calls to the Sound API method {{#crossLink \"Sound/play\"}}{{/crossLink}} or\n{{#crossLink \"Sound/createInstance\"}}{{/crossLink}} are made. The AbstractSoundInstance is returned by the active plugin\nfor control by the user.\n\n<h4>Example</h4>\n\n     var myInstance = createjs.Sound.play(\"myAssetPath/mySrcFile.mp3\");\n\nA number of additional parameters provide a quick way to determine how a sound is played. Please see the Sound\nAPI method {{#crossLink \"Sound/play\"}}{{/crossLink}} for a list of arguments.\n\nOnce a AbstractSoundInstance is created, a reference can be stored that can be used to control the audio directly through\nthe AbstractSoundInstance. If the reference is not stored, the AbstractSoundInstance will play out its audio (and any loops), and\nis then de-referenced from the {{#crossLink \"Sound\"}}{{/crossLink}} class so that it can be cleaned up. If audio\nplayback has completed, a simple call to the {{#crossLink \"AbstractSoundInstance/play\"}}{{/crossLink}} instance method\nwill rebuild the references the Sound class need to control it.\n\n     var myInstance = createjs.Sound.play(\"myAssetPath/mySrcFile.mp3\", {loop:2});\n     myInstance.on(\"loop\", handleLoop);\n     function handleLoop(event) {\n         myInstance.volume = myInstance.volume * 0.5;\n     }\n\nEvents are dispatched from the instance to notify when the sound has completed, looped, or when playback fails\n\n     var myInstance = createjs.Sound.play(\"myAssetPath/mySrcFile.mp3\");\n     myInstance.on(\"complete\", handleComplete);\n     myInstance.on(\"loop\", handleLoop);\n     myInstance.on(\"failed\", handleFailed);",
            "params": [
                {
                    "name": "src",
                    "description": "The path to and file name of the sound.",
                    "type": "String"
                },
                {
                    "name": "startTime",
                    "description": "Audio sprite property used to apply an offset, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "Audio sprite property used to set the time the clip plays for, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "playbackResource",
                    "description": "Any resource needed by plugin to support audio playback.",
                    "type": "Object"
                }
            ],
            "extends": "EventDispatcher",
            "is_constructor": 1
        },
        "Sound": {
            "name": "Sound",
            "shortname": "Sound",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/Sound.js",
            "line": 82,
            "description": "The Sound class is the public API for creating sounds, controlling the overall sound levels, and managing plugins.\nAll Sound APIs on this class are static.\n\n<b>Registering and Preloading</b><br />\nBefore you can play a sound, it <b>must</b> be registered. You can do this with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}},\nor register multiple sounds using {{#crossLink \"Sound/registerSounds\"}}{{/crossLink}}. If you don't register a\nsound prior to attempting to play it using {{#crossLink \"Sound/play\"}}{{/crossLink}} or create it using {{#crossLink \"Sound/createInstance\"}}{{/crossLink}},\nthe sound source will be automatically registered but playback will fail as the source will not be ready. If you use\n<a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>, registration is handled for you when the sound is\npreloaded. It is recommended to preload sounds either internally using the register functions or externally using\nPreloadJS so they are ready when you want to use them.\n\n<b>Playback</b><br />\nTo play a sound once it's been registered and preloaded, use the {{#crossLink \"Sound/play\"}}{{/crossLink}} method.\nThis method returns a {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} which can be paused, resumed, muted, etc.\nPlease see the {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} documentation for more on the instance control APIs.\n\n<b>Plugins</b><br />\nBy default, the {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} or the {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}\nare used (when available), although developers can change plugin priority or add new plugins (such as the\nprovided {{#crossLink \"FlashAudioPlugin\"}}{{/crossLink}}). Please see the {{#crossLink \"Sound\"}}{{/crossLink}} API\nmethods for more on the playback and plugin APIs. To install plugins, or specify a different plugin order, see\n{{#crossLink \"Sound/installPlugins\"}}{{/crossLink}}.\n\n<h4>Example</h4>\n\n     createjs.FlashAudioPlugin.swfPath = \"../src/soundjs/flashaudio\";\n     createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.FlashAudioPlugin]);\n     createjs.Sound.alternateExtensions = [\"mp3\"];\n     createjs.Sound.on(\"fileload\", this.loadHandler, this);\n     createjs.Sound.registerSound(\"path/to/mySound.ogg\", \"sound\");\n     function loadHandler(event) {\n         // This is fired for each sound that is registered.\n         var instance = createjs.Sound.play(\"sound\");  // play using id.  Could also use full source path or event.src.\n         instance.on(\"complete\", this.handleComplete, this);\n         instance.volume = 0.5;\n     }\n\nThe maximum number of concurrently playing instances of the same sound can be specified in the \"data\" argument\nof {{#crossLink \"Sound/registerSound\"}}{{/crossLink}}.  Note that if not specified, the active plugin will apply\na default limit.  Currently HTMLAudioPlugin sets a default limit of 2, while WebAudioPlugin and FlashAudioPlugin set a\ndefault limit of 100.\n\n     createjs.Sound.registerSound(\"sound.mp3\", \"soundId\", 4);\n\nSound can be used as a plugin with PreloadJS to help preload audio properly. Audio preloaded with PreloadJS is\nautomatically registered with the Sound class. When audio is not preloaded, Sound will do an automatic internal\nload. As a result, it may fail to play the first time play is called if the audio is not finished loading. Use\nthe {{#crossLink \"Sound/fileload:event\"}}{{/crossLink}} event to determine when a sound has finished internally\npreloading. It is recommended that all audio is preloaded before it is played.\n\n     var queue = new createjs.LoadQueue();\n\t\tqueue.installPlugin(createjs.Sound);\n\n<b>Audio Sprites</b><br />\nSoundJS has added support for {{#crossLink \"AudioSprite\"}}{{/crossLink}}, available as of version 0.6.0.\nFor those unfamiliar with audio sprites, they are much like CSS sprites or sprite sheets: multiple audio assets\ngrouped into a single file.\n\n<h4>Example</h4>\n\n\t\tvar assetsPath = \"./assets/\";\n\t\tvar sounds = [{\n\t\t\tsrc:\"MyAudioSprite.ogg\", data: {\n\t\t\t\taudioSprite: [\n\t\t\t\t\t{id:\"sound1\", startTime:0, duration:500},\n\t\t\t\t\t{id:\"sound2\", startTime:1000, duration:400},\n\t\t\t\t\t{id:\"sound3\", startTime:1700, duration: 1000}\n\t\t\t\t]}\n\t\t\t}\n\t\t];\n\t\tcreatejs.Sound.alternateExtensions = [\"mp3\"];\n\t\tcreatejs.Sound.on(\"fileload\", loadSound);\n\t\tcreatejs.Sound.registerSounds(sounds, assetsPath);\n\t\t// after load is complete\n\t\tcreatejs.Sound.play(\"sound2\");\n\n<b>Mobile Playback</b><br />\nDevices running iOS require the WebAudio context to be \"unlocked\" by playing at least one sound inside of a user-\ninitiated event (such as touch/click). Earlier versions of SoundJS included a \"MobileSafe\" sample, but this is no\nlonger necessary as of SoundJS 0.6.2.\n<ul>\n    <li>\n        In SoundJS 0.4.1 and above, you can either initialize plugins or use the {{#crossLink \"WebAudioPlugin/playEmptySound\"}}{{/crossLink}}\n        method in the call stack of a user input event to manually unlock the audio context.\n    </li>\n    <li>\n        In SoundJS 0.6.2 and above, SoundJS will automatically listen for the first document-level \"mousedown\"\n        and \"touchend\" event, and unlock WebAudio. This will continue to check these events until the WebAudio\n        context becomes \"unlocked\" (changes from \"suspended\" to \"running\")\n    </li>\n    <li>\n        Both the \"mousedown\" and \"touchend\" events can be used to unlock audio in iOS9+, the \"touchstart\" event\n        will work in iOS8 and below. The \"touchend\" event will only work in iOS9 when the gesture is interpreted\n        as a \"click\", so if the user long-presses the button, it will no longer work.\n    </li>\n    <li>\n        When using the <a href=\"http://www.createjs.com/docs/easeljs/classes/Touch.html\">EaselJS Touch class</a>,\n        the \"mousedown\" event will not fire when a canvas is clicked, since MouseEvents are prevented, to ensure\n        only touch events fire. To get around this, you can either rely on \"touchend\", or:\n        <ol>\n            <li>Set the `allowDefault` property on the Touch class constructor to `true` (defaults to `false`).</li>\n            <li>Set the `preventSelection` property on the EaselJS `Stage` to `false`.</li>\n        </ol>\n        These settings may change how your application behaves, and are not recommended.\n    </li>\n</ul>\n\n<b>Loading Alternate Paths and Extension-less Files</b><br />\nSoundJS supports loading alternate paths and extension-less files by passing an object instead of a string for\nthe `src` property, which is a hash using the format `{extension:\"path\", extension2:\"path2\"}`. These labels are\nhow SoundJS determines if the browser will support the sound. This also enables multiple formats to live in\ndifferent folders, or on CDNs, which often has completely different filenames for each file.\n\nPriority is determined by the property order (first property is tried first).  This is supported by both internal loading\nand loading with PreloadJS.\n\n<em>Note: an id is required for playback.</em>\n\n<h4>Example</h4>\n\n\t\tvar sounds = {path:\"./audioPath/\",\n\t\t\t\tmanifest: [\n\t\t\t\t{id: \"cool\", src: {mp3:\"mp3/awesome.mp3\", ogg:\"noExtensionOggFile\"}}\n\t\t]};\n\n\t\tcreatejs.Sound.alternateExtensions = [\"mp3\"];\n\t\tcreatejs.Sound.addEventListener(\"fileload\", handleLoad);\n\t\tcreatejs.Sound.registerSounds(sounds);\n\n<h3>Known Browser and OS issues</h3>\n<b>IE 9 HTML Audio limitations</b><br />\n<ul><li>There is a delay in applying volume changes to tags that occurs once playback is started. So if you have\nmuted all sounds, they will all play during this delay until the mute applies internally. This happens regardless of\nwhen or how you apply the volume change, as the tag seems to need to play to apply it.</li>\n<li>MP3 encoding will not always work for audio tags, particularly in Internet Explorer. We've found default\nencoding with 64kbps works.</li>\n<li>Occasionally very short samples will get cut off.</li>\n<li>There is a limit to how many audio tags you can load and play at once, which appears to be determined by\nhardware and browser settings.  See {{#crossLink \"HTMLAudioPlugin.MAX_INSTANCES\"}}{{/crossLink}} for a safe\nestimate.</li></ul>\n\n<b>Firefox 25 Web Audio limitations</b>\n<ul><li>mp3 audio files do not load properly on all windows machines, reported\n<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=929969\" target=\"_blank\">here</a>. </br>\nFor this reason it is recommended to pass another FF supported type (ie ogg) first until this bug is resolved, if\npossible.</li></ul>\n\n<b>Safari limitations</b><br />\n<ul><li>Safari requires Quicktime to be installed for audio playback.</li></ul>\n\n<b>iOS 6 Web Audio limitations</b><br />\n<ul><li>Sound is initially locked, and must be unlocked via a user-initiated event. Please see the section on\nMobile Playback above.</li>\n<li>A bug exists that will distort un-cached web audio when a video element is present in the DOM that has audio\nat a different sampleRate.</li>\n</ul>\n\n<b>Android HTML Audio limitations</b><br />\n<ul><li>We have no control over audio volume. Only the user can set volume on their device.</li>\n<li>We can only play audio inside a user event (touch/click).  This currently means you cannot loop sound or use\na delay.</li></ul>\n\n<b>Web Audio and PreloadJS</b><br />\n<ul><li>Web Audio must be loaded through XHR, therefore when used with PreloadJS, tag loading is not possible.\nThis means that tag loading can not be used to avoid cross domain issues.</li><ul>",
            "static": 1,
            "uses": [
                "EventDispatcher"
            ]
        },
        "SoundJS": {
            "name": "SoundJS",
            "shortname": "SoundJS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SoundJS",
            "namespace": "",
            "file": "soundjs/version.js",
            "line": 8,
            "description": "Static class holding library specific information such as the version and buildDate of the library.\nThe SoundJS class has been renamed {{#crossLink \"Sound\"}}{{/crossLink}}.  Please see {{#crossLink \"Sound\"}}{{/crossLink}}\nfor information on using sound."
        }
    },
    "classitems": [
        {
            "file": "createjs/events/ErrorEvent.js",
            "line": 50,
            "description": "The short error title, which indicates the type of error that occurred.",
            "itemtype": "property",
            "name": "title",
            "type": "String",
            "class": "ErrorEvent",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/ErrorEvent.js",
            "line": 57,
            "description": "The verbose error message, containing details about the error.",
            "itemtype": "property",
            "name": "message",
            "type": "String",
            "class": "ErrorEvent",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/ErrorEvent.js",
            "line": 64,
            "description": "Additional data attached to an error.",
            "itemtype": "property",
            "name": "data",
            "type": "{Object}",
            "class": "ErrorEvent",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 64,
            "description": "The type of event.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 71,
            "description": "The object that generated an event.",
            "itemtype": "property",
            "name": "target",
            "type": "Object",
            "default": "null",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 80,
            "description": "The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\nalways be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\nis generated from childObj, then a listener on parentObj would receive the event with\ntarget=childObj (the original target) and currentTarget=parentObj (where the listener was added).",
            "itemtype": "property",
            "name": "currentTarget",
            "type": "Object",
            "default": "null",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 92,
            "description": "For bubbling events, this indicates the current event phase:<OL>\n\t<LI> capture phase: starting from the top parent to the target</LI>\n\t<LI> at target phase: currently being dispatched from the target</LI>\n\t<LI> bubbling phase: from the target to the top parent</LI>\n</OL>",
            "itemtype": "property",
            "name": "eventPhase",
            "type": "Number",
            "default": "0",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 105,
            "description": "Indicates whether the event will bubble through the display list.",
            "itemtype": "property",
            "name": "bubbles",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 114,
            "description": "Indicates whether the default behaviour of this event can be cancelled via\n{{#crossLink \"Event/preventDefault\"}}{{/crossLink}}. This is set via the Event constructor.",
            "itemtype": "property",
            "name": "cancelable",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 124,
            "description": "The epoch time at which this event was created.",
            "itemtype": "property",
            "name": "timeStamp",
            "type": "Number",
            "default": "0",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 133,
            "description": "Indicates if {{#crossLink \"Event/preventDefault\"}}{{/crossLink}} has been called\non this event.",
            "itemtype": "property",
            "name": "defaultPrevented",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 143,
            "description": "Indicates if {{#crossLink \"Event/stopPropagation\"}}{{/crossLink}} or\n{{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called on this event.",
            "itemtype": "property",
            "name": "propagationStopped",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 153,
            "description": "Indicates if {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called\non this event.",
            "itemtype": "property",
            "name": "immediatePropagationStopped",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 163,
            "description": "Indicates if {{#crossLink \"Event/remove\"}}{{/crossLink}} has been called on this event.",
            "itemtype": "property",
            "name": "removed",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 175,
            "description": "Sets {{#crossLink \"Event/defaultPrevented\"}}{{/crossLink}} to true if the event is cancelable.\nMirrors the DOM level 2 event standard. In general, cancelable events that have `preventDefault()` called will\ncancel the default behaviour associated with the event.",
            "itemtype": "method",
            "name": "preventDefault",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 185,
            "description": "Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} to true.\nMirrors the DOM event standard.",
            "itemtype": "method",
            "name": "stopPropagation",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 194,
            "description": "Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} and\n{{#crossLink \"Event/immediatePropagationStopped\"}}{{/crossLink}} to true.\nMirrors the DOM event standard.",
            "itemtype": "method",
            "name": "stopImmediatePropagation",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 204,
            "description": "Causes the active listener to be removed via removeEventListener();\n\n\t\tmyBtn.addEventListener(\"click\", function(evt) {\n\t\t\t// do stuff...\n\t\t\tevt.remove(); // removes this listener.\n\t\t});",
            "itemtype": "method",
            "name": "remove",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 218,
            "description": "Returns a clone of the Event instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Event instance.",
                "type": "Event"
            },
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 227,
            "description": "Provides a chainable shortcut method for setting a number of properties on the instance.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "props",
                    "description": "A generic object containing properties to copy to the instance.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the instance the method is called on (useful for chaining calls.)",
                "type": "Event"
            },
            "chainable": 1,
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 240,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 99,
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "_listeners",
            "type": "Object",
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 106,
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "_captureListeners",
            "type": "Object",
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 116,
            "description": "Static initializer to mix EventDispatcher methods into a target object or prototype.\n\n\t\tEventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class\n\t\tEventDispatcher.initialize(myObject); // add to a specific instance",
            "itemtype": "method",
            "name": "initialize",
            "static": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target object to inject EventDispatcher methods into. This can be an instance or a\nprototype.",
                    "type": "Object"
                }
            ],
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 140,
            "description": "Adds the specified event listener. Note that adding multiple listeners to the same function will result in\nmultiple callbacks getting fired.\n\n<h4>Example</h4>\n\n     displayObject.addEventListener(\"click\", handleClick);\n     function handleClick(event) {\n        // Click happened.\n     }",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "An object with a handleEvent method, or a function that will be called when\nthe event is dispatched.",
                    "type": "Function | Object"
                },
                {
                    "name": "useCapture",
                    "description": "For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the listener for chaining or assignment.",
                "type": "Function | Object"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 173,
            "description": "A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener\nonly run once, associate arbitrary data with the listener, and remove the listener.\n\nThis method works by creating an anonymous wrapper function and subscribing it with addEventListener.\nThe wrapper function is returned for use with `removeEventListener` (or `off`).\n\n<b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener, or use\n{{#crossLink \"Event/remove\"}}{{/crossLink}}. Likewise, each time you call `on` a NEW wrapper function is subscribed, so multiple calls\nto `on` with the same params will create multiple listeners.\n\n<h4>Example</h4>\n\n\t\tvar listener = myBtn.on(\"click\", handleClick, null, false, {count:3});\n\t\tfunction handleClick(evt, data) {\n\t\t\tdata.count -= 1;\n\t\t\tconsole.log(this == myBtn); // true - scope defaults to the dispatcher\n\t\t\tif (data.count == 0) {\n\t\t\t\talert(\"clicked 3 times!\");\n\t\t\t\tmyBtn.off(\"click\", listener);\n\t\t\t\t// alternately: evt.remove();\n\t\t\t}\n\t\t}",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "An object with a handleEvent method, or a function that will be called when\nthe event is dispatched.",
                    "type": "Function | Object"
                },
                {
                    "name": "scope",
                    "description": "The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "once",
                    "description": "If true, the listener will remove itself after the first time it is triggered.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "data",
                    "description": "Arbitrary data that will be included as the second parameter when the listener is called.",
                    "type": "*",
                    "optional": true
                },
                {
                    "name": "useCapture",
                    "description": "For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.",
                "type": "Function"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 219,
            "description": "Removes the specified event listener.\n\n<b>Important Note:</b> that you must pass the exact function reference used when the event was added. If a proxy\nfunction, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\nclosure will not work.\n\n<h4>Example</h4>\n\n     displayObject.removeEventListener(\"click\", handleClick);",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener function or object.",
                    "type": "Function | Object"
                },
                {
                    "name": "useCapture",
                    "description": "For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 249,
            "description": "A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the\n.on method.\n\n<b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener. See \n{{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} for an example.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener function or object.",
                    "type": "Function | Object"
                },
                {
                    "name": "useCapture",
                    "description": "For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 263,
            "description": "Removes all listeners for the specified type, or all listeners of all types.\n\n<h4>Example</h4>\n\n     // Remove all listeners\n     displayObject.removeAllEventListeners();\n\n     // Remove all click listeners\n     displayObject.removeAllEventListeners(\"click\");",
            "itemtype": "method",
            "name": "removeAllEventListeners",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event. If omitted, all listeners for all types will be removed.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 285,
            "description": "Dispatches the specified event to all listeners.\n\n<h4>Example</h4>\n\n     // Use a string event\n     this.dispatchEvent(\"complete\");\n\n     // Use an Event instance\n     var event = new createjs.Event(\"progress\");\n     this.dispatchEvent(event);",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "eventObj",
                    "description": "An object with a \"type\" property, or a string type.\nWhile a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,\ndispatchEvent will construct an Event instance if necessary with the specified type. This latter approach can\nbe used to avoid event object instantiation for non-bubbling events that may not have any listeners.",
                    "type": "Object | String | Event"
                },
                {
                    "name": "bubbles",
                    "description": "Specifies the `bubbles` value when a string was passed to eventObj.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "cancelable",
                    "description": "Specifies the `cancelable` value when a string was passed to eventObj.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns false if `preventDefault()` was called on a cancelable event, true otherwise.",
                "type": "Boolean"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 339,
            "description": "Indicates whether there is at least one listener for the specified event type.",
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if there is at least one listener for the specified event.",
                "type": "Boolean"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 350,
            "description": "Indicates whether there is at least one listener for the specified event type on this object or any of its\nancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the\nspecified type is dispatched from this object, it will trigger at least one listener.\n\nThis is similar to {{#crossLink \"EventDispatcher/hasEventListener\"}}{{/crossLink}}, but it searches the entire\nevent flow for a listener, not just this object.",
            "itemtype": "method",
            "name": "willTrigger",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns `true` if there is at least one listener for the specified event.",
                "type": "Boolean"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 370,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 380,
            "itemtype": "method",
            "name": "_dispatchEvent",
            "params": [
                {
                    "name": "eventObj",
                    "description": "",
                    "type": "Object | Event"
                },
                {
                    "name": "eventPhase",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/BrowserDetect.js",
            "line": 42,
            "description": "An object that determines the current browser, version, operating system, and other environment\nvariables via user agent string.\n\nUsed for audio because feature detection is unable to detect the many limitations of mobile devices.\n\n<h4>Example</h4>\n\n     if (createjs.BrowserDetect.isIOS) { // do stuff }",
            "itemtype": "property",
            "name": "BrowserDetect",
            "type": "{Object}",
            "is_constructor": 1,
            "static": 1,
            "class": "Utility Methods",
            "module": "CreateJS",
            "subprops": [
                {
                    "name": "isFirefox",
                    "description": "True if our browser is Firefox.",
                    "type": "Boolean"
                },
                {
                    "name": "isOpera",
                    "description": "True if our browser is opera.",
                    "type": "Boolean"
                },
                {
                    "name": "isChrome",
                    "description": "True if our browser is Chrome.  Note that Chrome for Android returns true, but is a\ncompletely different browser with different abilities.",
                    "type": "Boolean"
                },
                {
                    "name": "isIOS",
                    "description": "True if our browser is safari for iOS devices (iPad, iPhone, and iPod).",
                    "type": "Boolean"
                },
                {
                    "name": "isAndroid",
                    "description": "True if our browser is Android.",
                    "type": "Boolean"
                },
                {
                    "name": "isBlackberry",
                    "description": "True if our browser is Blackberry.",
                    "type": "Boolean"
                }
            ]
        },
        {
            "file": "createjs/utils/deprecate.js",
            "line": 40,
            "description": "Wraps deprecated methods so they still be used, but throw warnings to developers.\n\n\tobj.deprecatedMethod = createjs.deprecate(\"Old Method Name\", obj._fallbackMethod);\n\nThe recommended approach for deprecated properties is:\n\n\ttry {\n\t\tObj\tect.defineProperties(object, {\n\t\t\treadyOnlyProp: { get: createjs.deprecate(\"readOnlyProp\", function() { return this.alternateProp; }) },\n\t\t\treadWriteProp: {\n\t\t\t\tget: createjs.deprecate(\"readOnlyProp\", function() { return this.alternateProp; }),\n\t\t\t\tset: createjs.deprecate(\"readOnlyProp\", function(val) { this.alternateProp = val; })\n\t\t});\n\t} catch (e) {}",
            "itemtype": "method",
            "name": "deprecate",
            "params": [
                {
                    "name": "fallbackMethod",
                    "description": "A method to call when the deprecated method is used. See the example for how",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "name",
                    "description": "The name of the method or property to display in the console warning.\nto deprecate properties.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "return": {
                "description": "If a fallbackMethod is supplied, returns a closure that will call the fallback method after\nlogging the warning in the console.",
                "type": "Function"
            },
            "class": "Utility Methods",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/extend.js",
            "line": 40,
            "description": "Sets up the prototype chain and constructor property for a new class.\n\nThis should be called right after creating the class constructor.\n\n\tfunction MySubClass() {}\n\tcreatejs.extend(MySubClass, MySuperClass);\n\tMySubClass.prototype.doSomething = function() { }\n\n\tvar foo = new MySubClass();\n\tconsole.log(foo instanceof MySuperClass); // true\n\tconsole.log(foo.prototype.constructor === MySubClass); // true",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "subclass",
                    "description": "The subclass.",
                    "type": "Function"
                },
                {
                    "name": "superclass",
                    "description": "The superclass to extend.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the subclass's new prototype.",
                "type": "Function"
            },
            "class": "Utility Methods",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/indexOf.js",
            "line": 40,
            "description": "Finds the first occurrence of a specified value searchElement in the passed in array, and returns the index of\nthat value.  Returns -1 if value is not found.\n\n     var i = createjs.indexOf(myArray, myElementToFind);",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "array",
                    "description": "Array to search for searchElement",
                    "type": "Array"
                },
                {
                    "name": "searchElement",
                    "description": "Element to find in array."
                }
            ],
            "return": {
                "description": "The first index of searchElement in array.",
                "type": "Number"
            },
            "class": "Utility Methods",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/promote.js",
            "line": 40,
            "description": "Promotes any methods on the super class that were overridden, by creating an alias in the format `prefix_methodName`.\nIt is recommended to use the super class's name as the prefix.\nAn alias to the super class's constructor is always added in the format `prefix_constructor`.\nThis allows the subclass to call super class methods without using `function.call`, providing better performance.\n\nFor example, if `MySubClass` extends `MySuperClass`, and both define a `draw` method, then calling `promote(MySubClass, \"MySuperClass\")`\nwould add a `MySuperClass_constructor` method to MySubClass and promote the `draw` method on `MySuperClass` to the\nprototype of `MySubClass` as `MySuperClass_draw`.\n\nThis should be called after the class's prototype is fully defined.\n\n\tfunction ClassA(name) {\n\t\tthis.name = name;\n\t}\n\tClassA.prototype.greet = function() {\n\t\treturn \"Hello \"+this.name;\n\t}\n\n\tfunction ClassB(name, punctuation) {\n\t\tthis.ClassA_constructor(name);\n\t\tthis.punctuation = punctuation;\n\t}\n\tcreatejs.extend(ClassB, ClassA);\n\tClassB.prototype.greet = function() {\n\t\treturn this.ClassA_greet()+this.punctuation;\n\t}\n\tcreatejs.promote(ClassB, \"ClassA\");\n\n\tvar foo = new ClassB(\"World\", \"!?!\");\n\tconsole.log(foo.greet()); // Hello World!?!",
            "itemtype": "method",
            "name": "promote",
            "params": [
                {
                    "name": "subclass",
                    "description": "The class to promote super class methods on.",
                    "type": "Function"
                },
                {
                    "name": "prefix",
                    "description": "The prefix to add to the promoted method names. Usually the name of the superclass.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the subclass.",
                "type": "Function"
            },
            "class": "Utility Methods",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/proxy.js",
            "line": 51,
            "description": "A function proxy for methods. By default, JavaScript methods do not maintain scope, so passing a method as a\ncallback will result in the method getting called in the scope of the caller. Using a proxy ensures that the\nmethod gets called in the correct scope.\n\nAdditional arguments can be passed that will be applied to the function when it is called.\n\n<h4>Example</h4>\n\n     myObject.addEventListener(\"event\", createjs.proxy(myHandler, this, arg1, arg2));\n\n     function myHandler(arg1, arg2) {\n          // This gets called when myObject.myCallback is executed.\n     }",
            "itemtype": "method",
            "name": "proxy",
            "params": [
                {
                    "name": "method",
                    "description": "The function to call",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope to call the method name on",
                    "type": "Object"
                },
                {
                    "name": "arg",
                    "description": "* Arguments that are appended to the callback for additional params.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Utility Methods",
            "module": "CreateJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioLoader.js",
            "line": 54,
            "description": "A Media object used to determine if src exists and to get duration",
            "itemtype": "property",
            "name": "_media",
            "type": "{Media}",
            "access": "protected",
            "tagname": "",
            "class": "CordovaAudioLoader",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioLoader.js",
            "line": 62,
            "description": "A time counter that triggers timeout if loading takes too long",
            "itemtype": "property",
            "name": "_loadTime",
            "type": "{number}",
            "access": "protected",
            "tagname": "",
            "class": "CordovaAudioLoader",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioLoader.js",
            "line": 70,
            "description": "The frequency to fire the loading timer until duration can be retrieved",
            "itemtype": "property",
            "name": "_TIMER_FREQUENCY",
            "type": "{number}",
            "access": "protected",
            "tagname": "",
            "class": "CordovaAudioLoader",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioLoader.js",
            "line": 95,
            "description": "Fires if audio cannot seek, indicating that src does not exist.",
            "itemtype": "method",
            "name": "_mediaErrorHandler",
            "params": [
                {
                    "name": "error",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "CordovaAudioLoader",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioLoader.js",
            "line": 106,
            "description": "will attempt to get duration of audio until successful or time passes this._item.loadTimeout",
            "itemtype": "method",
            "name": "_getMediaDuration",
            "access": "protected",
            "tagname": "",
            "class": "CordovaAudioLoader",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioPlugin.js",
            "line": 81,
            "description": "Sets a default playAudioWhenScreenIsLocked property for play calls on iOS devices.\nIndividual SoundInstances can alter the default with {{#crossLink \"CordovaAudioSoundInstance/playWhenScreenLocked\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "playWhenScreenLocked",
            "type": "{boolean}",
            "static": 1,
            "class": "CordovaAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioPlugin.js",
            "line": 90,
            "description": "The capabilities of the plugin. This is generated via the {{#crossLink \"CordovaAudioPlugin/_generateCapabilities\"}}{{/crossLink}}\nmethod. Please see the Sound {{#crossLink \"Sound/capabilities:property\"}}{{/crossLink}} method for an overview of all\nof the available properties.",
            "itemtype": "property",
            "name": "_capabilities",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "CordovaAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioPlugin.js",
            "line": 103,
            "description": "Determine if the plugin can be used in the current browser/OS. Note that HTML audio is available in most modern\nbrowsers, but is disabled in iOS because of its limitations.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "If the plugin can be initialized.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "CordovaAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioPlugin.js",
            "line": 115,
            "description": "Determine the capabilities of the plugin. Used internally. Please see the Sound API {{#crossLink \"Sound/capabilities:property\"}}{{/crossLink}}\nmethod for an overview of plugin capabilities.",
            "itemtype": "method",
            "name": "_generateCapabilities",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "CordovaAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioPlugin.js",
            "line": 160,
            "description": "Get the duration for a src.  Intended for internal use by CordovaAudioSoundInstance.",
            "itemtype": "method",
            "name": "getSrcDuration",
            "params": [
                {
                    "name": "src",
                    "description": ""
                }
            ],
            "return": {
                "description": "The duration of the src or null if it does not exist",
                "type": "Number"
            },
            "class": "CordovaAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioSoundInstance.js",
            "line": 56,
            "description": "Sets the playAudioWhenScreenIsLocked property for play calls on iOS devices.",
            "itemtype": "property",
            "name": "playWhenScreenLocked",
            "type": "{boolean}",
            "class": "CordovaAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioSoundInstance.js",
            "line": 64,
            "description": "Used to approximate the playback position by storing the number of milliseconds elapsed since\n1 January 1970 00:00:00 UTC when playing\nNote that if js clock is out of sync with Media playback, this will become increasingly inaccurate.",
            "itemtype": "property",
            "name": "_playStartTime",
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "CordovaAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioSoundInstance.js",
            "line": 74,
            "description": "A TimeOut used to trigger the end and possible loop of audio sprites.",
            "itemtype": "property",
            "name": "_audioSpriteTimeout",
            "type": "{null}",
            "access": "protected",
            "tagname": "",
            "class": "CordovaAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioSoundInstance.js",
            "line": 82,
            "description": "Boolean value that indicates if we are using an audioSprite",
            "itemtype": "property",
            "name": "_audioSprite",
            "type": "{boolean}",
            "access": "protected",
            "tagname": "",
            "class": "CordovaAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioSoundInstance.js",
            "line": 108,
            "description": "Called by {{#crossLink \"Sound\"}}{{/crossLink}} when plugin does not handle master volume.\nundoc'd because it is not meant to be used outside of Sound\n#method setMasterVolume",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "CordovaAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioSoundInstance.js",
            "line": 118,
            "description": "Called by {{#crossLink \"Sound\"}}{{/crossLink}} when plugin does not handle master mute.\nundoc'd because it is not meant to be used outside of Sound\n#method setMasterMute",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "CordovaAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioSoundInstance.js",
            "line": 135,
            "description": "Maps to <a href=\"http://plugins.cordova.io/#/package/org.apache.cordova.media\" target=\"_blank\">Media.getCurrentPosition</a>,\nwhich is curiously asynchronus and requires a callback.",
            "itemtype": "method",
            "name": "getCurrentPosition",
            "params": [
                {
                    "name": "mediaSuccess",
                    "description": "The callback that is passed the current position in seconds.",
                    "type": "Method"
                },
                {
                    "name": "mediaError",
                    "description": "(Optional) The callback to execute if an error occurs.",
                    "type": "Method",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "CordovaAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioSoundInstance.js",
            "line": 151,
            "description": "media object has failed and likely will never work",
            "itemtype": "method",
            "name": "_handleMediaError",
            "params": [
                {
                    "name": "error",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CordovaAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/cordovaaudio/CordovaAudioSoundInstance.js",
            "line": 207,
            "description": "Synchronizes the best guess position with the actual current position.",
            "itemtype": "method",
            "name": "_updatePausePos",
            "params": [
                {
                    "name": "pos",
                    "description": "The current position in seconds",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CordovaAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/data/PlayPropsConfig.js",
            "line": 73,
            "description": "How to interrupt any currently playing instances of audio with the same source,\nif the maximum number of instances of the sound are already playing. Values are defined as\n<code>INTERRUPT_TYPE</code> constants on the Sound class, with the default defined by\n{{#crossLink \"Sound/defaultInterruptBehavior:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "interrupt",
            "type": "{string}",
            "default": "null",
            "class": "PlayPropsConfig",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/data/PlayPropsConfig.js",
            "line": 84,
            "description": "The amount of time to delay the start of audio playback, in milliseconds.",
            "itemtype": "property",
            "name": "delay",
            "type": "{Number}",
            "default": "null",
            "class": "PlayPropsConfig",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/data/PlayPropsConfig.js",
            "line": 92,
            "description": "The offset from the start of the audio to begin playback, in milliseconds.",
            "itemtype": "property",
            "name": "offset",
            "type": "{number}",
            "default": "null",
            "class": "PlayPropsConfig",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/data/PlayPropsConfig.js",
            "line": 100,
            "description": "How many times the audio loops when it reaches the end of playback. The default is 0 (no\nloops), and -1 can be used for infinite playback.",
            "itemtype": "property",
            "name": "loop",
            "type": "{number}",
            "default": "null",
            "class": "PlayPropsConfig",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/data/PlayPropsConfig.js",
            "line": 109,
            "description": "The volume of the sound, between 0 and 1. Note that the master volume is applied\nagainst the individual volume.",
            "itemtype": "property",
            "name": "volume",
            "type": "{number}",
            "default": "null",
            "class": "PlayPropsConfig",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/data/PlayPropsConfig.js",
            "line": 118,
            "description": "The left-right pan of the sound (if supported), between -1 (left) and 1 (right).",
            "itemtype": "property",
            "name": "pan",
            "type": "{number}",
            "default": "null",
            "class": "PlayPropsConfig",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/data/PlayPropsConfig.js",
            "line": 126,
            "description": "Used to create an audio sprite (with duration), the initial offset to start playback and loop from, in milliseconds.",
            "itemtype": "property",
            "name": "startTime",
            "type": "{number}",
            "default": "null",
            "class": "PlayPropsConfig",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/data/PlayPropsConfig.js",
            "line": 134,
            "description": "Used to create an audio sprite (with startTime), the amount of time to play the clip for, in milliseconds.",
            "itemtype": "property",
            "name": "duration",
            "type": "{number}",
            "default": "null",
            "class": "PlayPropsConfig",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/data/PlayPropsConfig.js",
            "line": 147,
            "description": "Creates a PlayPropsConfig from another PlayPropsConfig or an Object.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "value",
                    "description": "The play properties",
                    "type": "PlayPropsConfig|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "PlayPropsConfig"
            },
            "static": 1,
            "class": "PlayPropsConfig",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/data/PlayPropsConfig.js",
            "line": 168,
            "description": "Provides a chainable shortcut method for setting a number of properties on the instance.\n\n<h4>Example</h4>\n\n     var PlayPropsConfig = new createjs.PlayPropsConfig().set({loop:-1, volume:0.7});",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "props",
                    "description": "A generic object containing properties to copy to the PlayPropsConfig instance.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the instance the method is called on (useful for chaining calls.)",
                "type": "PlayPropsConfig"
            },
            "class": "PlayPropsConfig",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioLoader.js",
            "line": 55,
            "description": "ID used to facilitate communication with flash.\nNot doc'd because this should not be altered externally",
            "itemtype": "property",
            "name": "flashId",
            "type": "{String}",
            "class": "FlashAudioLoader",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioLoader.js",
            "line": 68,
            "description": "A reference to the Flash instance that gets created.",
            "itemtype": "property",
            "name": "flash",
            "type": "{Object | Embed}",
            "access": "private",
            "tagname": "",
            "class": "FlashAudioLoader",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioLoader.js",
            "line": 76,
            "description": "A list of loader instances that tried to load before _flash was set",
            "itemtype": "property",
            "name": "_preloadInstances",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "FlashAudioLoader",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioLoader.js",
            "line": 84,
            "description": "Set the Flash instance on the class, and start loading on any instances that had load called\nbefore flash was ready",
            "itemtype": "method",
            "name": "setFlash",
            "params": [
                {
                    "name": "flash",
                    "description": "Flash instance that handles loading and playback"
                }
            ],
            "class": "FlashAudioLoader",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioLoader.js",
            "line": 112,
            "description": "called from flash when loading has progress",
            "itemtype": "method",
            "name": "handleProgress",
            "params": [
                {
                    "name": "loaded",
                    "description": ""
                },
                {
                    "name": "total",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "FlashAudioLoader",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioLoader.js",
            "line": 123,
            "description": "Called from Flash when sound is loaded.  Set our ready state and fire callbacks / events",
            "itemtype": "method",
            "name": "handleComplete",
            "access": "protected",
            "tagname": "",
            "class": "FlashAudioLoader",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioLoader.js",
            "line": 133,
            "description": "Receive error event from flash and pass it to callback.",
            "itemtype": "method",
            "name": "handleError",
            "params": [
                {
                    "name": "error",
                    "description": "",
                    "type": "Event"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "FlashAudioLoader",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 74,
            "description": "A developer flag to output all flash events to the console (if it exists).  Used for debugging.\n\n     createjs.Sound.activePlugin.showOutput = true;",
            "itemtype": "property",
            "name": "showOutput",
            "type": "{Boolean}",
            "default": "false",
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 87,
            "description": "The id name of the DIV that gets created for Flash content.",
            "itemtype": "property",
            "name": "_CONTAINER_ID",
            "type": "{String}",
            "default": "flashAudioContainer",
            "access": "protected",
            "tagname": "",
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 96,
            "description": "The id name of the DIV wrapper that contains the Flash content.",
            "itemtype": "property",
            "name": "_WRAPPER_ID",
            "type": "{String}",
            "default": "SoundJSFlashContainer",
            "access": "protected",
            "tagname": "",
            "since": "0.4.1",
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 106,
            "description": "A reference to the DIV container that gets created to hold the Flash instance.",
            "itemtype": "property",
            "name": "_container",
            "type": "{HTMLDivElement}",
            "access": "protected",
            "tagname": "",
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 114,
            "description": "A reference to the Flash instance that gets created.",
            "itemtype": "property",
            "name": "flash",
            "type": "{Object | Embed}",
            "access": "protected",
            "tagname": "",
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 122,
            "description": "Determines if the Flash object has been created and initialized. This is required to make <code>ExternalInterface</code>\ncalls from JavaScript to Flash.",
            "itemtype": "property",
            "name": "flashReady",
            "type": "{Boolean}",
            "default": "false",
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 131,
            "description": "A hash of SoundInstances indexed by the related ID in Flash. This lookup is required to connect sounds in\nJavaScript to their respective instances in Flash.",
            "itemtype": "property",
            "name": "_flashInstances",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 140,
            "description": "A hash of Sound Preload instances indexed by the related ID in Flash. This lookup is required to connect\na preloading sound in Flash with its respective instance in JavaScript.",
            "itemtype": "property",
            "name": "_flashPreloadInstances",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 180,
            "description": "Event constant for the \"registerFlashID\" event for cleaner code.",
            "itemtype": "property",
            "name": "_REG_FLASHID",
            "type": "{String}",
            "default": "registerflashid",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 190,
            "description": "Event constant for the \"unregisterFlashID\" event for cleaner code.",
            "itemtype": "property",
            "name": "_UNREG_FLASHID",
            "type": "{String}",
            "default": "unregisterflashid",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 200,
            "description": "The capabilities of the plugin. This is generated via the {{#crossLink \"WebAudioPlugin/_generateCapabilities\"}}{{/crossLink}}\nmethod. Please see the Sound {{#crossLink \"Sound/capabilities:property\"}}{{/crossLink}} method for a list of available\ncapabilities.",
            "itemtype": "property",
            "name": "_capabilities",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 211,
            "description": "The path relative to the HTML page that the FlashAudioPlugin.swf resides. Note if this is not correct, this\nplugin will not work.",
            "itemtype": "property",
            "name": "swfPath",
            "type": "{String}",
            "default": "src/SoundJS",
            "static": 1,
            "since": "0.5.2",
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 224,
            "description": "Determine if the plugin can be used in the current browser/OS.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "If the plugin can be initialized.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 238,
            "description": "Determine the capabilities of the plugin. Used internally. Please see the Sound API {{#crossLink \"Sound/capabilities:property\"}}{{/crossLink}}\nmethod for an overview of plugin capabilities.",
            "itemtype": "method",
            "name": "_generateCapabilities",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 294,
            "description": "The SWF used for sound preloading and playback has been initialized.",
            "itemtype": "method",
            "name": "_handleSWFReady",
            "params": [
                {
                    "name": "event",
                    "description": "Contains a reference to the swf.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 304,
            "description": "The Flash application that handles preloading and playback is ready. We wait for a callback from Flash to\nensure that everything is in place before playback begins.",
            "itemtype": "method",
            "name": "_handleFlashReady",
            "access": "protected",
            "tagname": "",
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioPlugin.js",
            "line": 317,
            "description": "Internal function used to set the gain value for master audio.  Should not be called externally.",
            "itemtype": "method",
            "name": "_updateVolume",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "since": "0.4.0",
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioSoundInstance.js",
            "line": 59,
            "description": "ID used to facilitate communication with flash.\nNot doc'd because this should not be altered externally\n#property flashId",
            "type": "{String}",
            "class": "FlashAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioSoundInstance.js",
            "line": 73,
            "description": "A reference to the Flash instance that gets created.\n#property flash",
            "type": "{Object | Embed}",
            "class": "FlashAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioSoundInstance.js",
            "line": 80,
            "description": "A list of loader instances that tried to load before _flash was set\n#property _preloadInstances",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "FlashAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioSoundInstance.js",
            "line": 88,
            "description": "Set the Flash instance on the class, and start loading on any instances that had load called\nbefore flash was ready\n#method setFlash",
            "params": [
                {
                    "name": "flash",
                    "description": "Flash instance that handles loading and playback"
                }
            ],
            "class": "FlashAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioSoundInstance.js",
            "line": 204,
            "description": "Called from Flash.  Lets us know flash has finished playing a sound.\n#method handleSoundFinished",
            "access": "protected",
            "tagname": "",
            "class": "FlashAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/flashaudio/FlashAudioSoundInstance.js",
            "line": 214,
            "description": "Called from Flash.  Lets us know that flash has played a sound to completion and is looping it.\n#method handleSoundLoop",
            "access": "protected",
            "tagname": "",
            "class": "FlashAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioPlugin.js",
            "line": 106,
            "description": "The maximum number of instances that can be loaded or played. This is a browser limitation, primarily limited to IE9.\nThe actual number varies from browser to browser (and is largely hardware dependant), but this is a safe estimate.\nAudio sprites work around this limitation.",
            "itemtype": "property",
            "name": "MAX_INSTANCES",
            "type": "{Number}",
            "default": "30",
            "static": 1,
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioPlugin.js",
            "line": 117,
            "description": "Event constant for the \"canPlayThrough\" event for cleaner code.",
            "itemtype": "property",
            "name": "_AUDIO_READY",
            "type": "{String}",
            "default": "canplaythrough",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioPlugin.js",
            "line": 127,
            "description": "Event constant for the \"ended\" event for cleaner code.",
            "itemtype": "property",
            "name": "_AUDIO_ENDED",
            "type": "{String}",
            "default": "ended",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioPlugin.js",
            "line": 137,
            "description": "Event constant for the \"seeked\" event for cleaner code.  We utilize this event for maintaining loop events.",
            "itemtype": "property",
            "name": "_AUDIO_SEEKED",
            "type": "{String}",
            "default": "seeked",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioPlugin.js",
            "line": 147,
            "description": "Event constant for the \"stalled\" event for cleaner code.",
            "itemtype": "property",
            "name": "_AUDIO_STALLED",
            "type": "{String}",
            "default": "stalled",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioPlugin.js",
            "line": 157,
            "description": "Event constant for the \"timeupdate\" event for cleaner code.  Utilized for looping audio sprites.\nThis event callsback ever 15 to 250ms and can be dropped by the browser for performance.",
            "itemtype": "property",
            "name": "_TIME_UPDATE",
            "type": "{String}",
            "default": "timeupdate",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioPlugin.js",
            "line": 168,
            "description": "The capabilities of the plugin. This is generated via the {{#crossLink \"HTMLAudioPlugin/_generateCapabilities\"}}{{/crossLink}}\nmethod. Please see the Sound {{#crossLink \"Sound/capabilities:property\"}}{{/crossLink}} method for an overview of all\nof the available properties.",
            "itemtype": "property",
            "name": "_capabilities",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioPlugin.js",
            "line": 181,
            "description": "Determine if the plugin can be used in the current browser/OS. Note that HTML audio is available in most modern\nbrowsers, but is disabled in iOS because of its limitations.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "If the plugin can be initialized.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioPlugin.js",
            "line": 193,
            "description": "Determine the capabilities of the plugin. Used internally. Please see the Sound API {{#crossLink \"Sound/capabilities:property\"}}{{/crossLink}}\nmethod for an overview of plugin capabilities.",
            "itemtype": "method",
            "name": "_generateCapabilities",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "HTMLAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioSoundInstance.js",
            "line": 76,
            "description": "Called by {{#crossLink \"Sound\"}}{{/crossLink}} when plugin does not handle master volume.\nundoc'd because it is not meant to be used outside of Sound\n#method setMasterVolume",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "HTMLAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioSoundInstance.js",
            "line": 86,
            "description": "Called by {{#crossLink \"Sound\"}}{{/crossLink}} when plugin does not handle master mute.\nundoc'd because it is not meant to be used outside of Sound\n#method setMasterMute",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "HTMLAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioSoundInstance.js",
            "line": 163,
            "description": "Used to handle when a tag is not ready for immediate playback when it is returned from the HTMLAudioTagPool.",
            "itemtype": "method",
            "name": "_handleTagReady",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioSoundInstance.js",
            "line": 205,
            "description": "Used to enable setting position, as we need to wait for that seek to be done before we add back our loop handling seek listener",
            "itemtype": "method",
            "name": "_handleSetPositionSeek",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioSoundInstance.js",
            "line": 217,
            "description": "Timer used to loop audio sprites.\nNOTE because of the inaccuracies in the timeupdate event (15 - 250ms) and in setting the tag to the desired timed\n(up to 300ms), it is strongly recommended not to loop audio sprites with HTML Audio if smooth looping is desired",
            "itemtype": "method",
            "name": "_handleAudioSpriteLoop",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "HTMLAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioTagPool.js",
            "line": 53,
            "description": "A hash lookup of each base audio tag, indexed by the audio source.",
            "itemtype": "property",
            "name": "_tags",
            "type": "{{}}",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "HTMLAudioTagPool",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioTagPool.js",
            "line": 62,
            "description": "An object pool for html audio tags",
            "itemtype": "property",
            "name": "_tagPool",
            "type": "{TagPool}",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "HTMLAudioTagPool",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioTagPool.js",
            "line": 71,
            "description": "A hash lookup of if a base audio tag is available, indexed by the audio source",
            "itemtype": "property",
            "name": "_tagsUsed",
            "type": "{{}}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "HTMLAudioTagPool",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioTagPool.js",
            "line": 81,
            "description": "Get an audio tag with the given source.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "src",
                    "description": "The source file used by the audio tag.",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "HTMLAudioTagPool",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioTagPool.js",
            "line": 105,
            "description": "Return an audio tag to the pool.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "src",
                    "description": "The source file used by the audio tag.",
                    "type": "String"
                },
                {
                    "name": "tag",
                    "description": "Audio tag to set.",
                    "type": "HTMLElement"
                }
            ],
            "static": 1,
            "class": "HTMLAudioTagPool",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioTagPool.js",
            "line": 121,
            "description": "Delete stored tag reference and return them to pool. Note that if the tag reference does not exist, this will fail.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "src",
                    "description": "The source for the tag",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If the TagPool was deleted.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "HTMLAudioTagPool",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioTagPool.js",
            "line": 137,
            "description": "Gets the duration of the src audio in milliseconds",
            "itemtype": "method",
            "name": "getDuration",
            "params": [
                {
                    "name": "src",
                    "description": "The source file used by the audio tag.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Duration of src in milliseconds",
                "type": "Number"
            },
            "static": 1,
            "class": "HTMLAudioTagPool",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioTagPool.js",
            "line": 154,
            "description": "The TagPool is an object pool for HTMLAudio tag instances.\n#class TagPool",
            "params": [
                {
                    "name": "src",
                    "description": "The source of the channel.",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioTagPool",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioTagPool.js",
            "line": 163,
            "description": "A list of all available tags in the pool.\n#property tags",
            "type": "{Array}",
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioTagPool",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioTagPool.js",
            "line": 177,
            "description": "Get an HTMLAudioElement for immediate playback. This takes it out of the pool.\n#method get",
            "return": {
                "description": "An HTML audio tag.",
                "type": "HTMLAudioElement"
            },
            "class": "HTMLAudioTagPool",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioTagPool.js",
            "line": 193,
            "description": "Put an HTMLAudioElement back in the pool for use.\n#method set",
            "params": [
                {
                    "name": "tag",
                    "description": "HTML audio tag",
                    "type": "HTMLAudioElement"
                }
            ],
            "class": "HTMLAudioTagPool",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/htmlaudio/HTMLAudioTagPool.js",
            "line": 213,
            "description": "Create an HTML audio tag.\n#method _createTag",
            "params": [
                {
                    "name": "src",
                    "description": "The source file to set for the audio tag.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns an HTML audio tag.",
                "type": "HTMLElement"
            },
            "access": "protected",
            "tagname": "",
            "class": "HTMLAudioTagPool",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioLoader.js",
            "line": 55,
            "description": "web audio context required for decoding audio",
            "itemtype": "property",
            "name": "context",
            "type": "{AudioContext}",
            "static": 1,
            "class": "WebAudioLoader",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioLoader.js",
            "line": 84,
            "description": "The audio has been decoded.",
            "itemtype": "method",
            "name": "handleAudioDecoded",
            "params": [
                {
                    "name": "decoded",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "WebAudioLoader",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 82,
            "description": "Value to set panning model to equal power for WebAudioSoundInstance.  Can be \"equalpower\" or 0 depending on browser implementation.",
            "itemtype": "property",
            "name": "_panningModel",
            "type": "{Number / String}",
            "access": "protected",
            "tagname": "",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 90,
            "description": "The web audio context, which WebAudio uses to play audio. All nodes that interact with the WebAudioPlugin\nneed to be created within this context.",
            "itemtype": "property",
            "name": "context",
            "type": "{AudioContext}",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 98,
            "description": "A DynamicsCompressorNode, which is used to improve sound quality and prevent audio distortion.\nIt is connected to <code>context.destination</code>.\n\nCan be accessed by advanced users through createjs.Sound.activePlugin.dynamicsCompressorNode.",
            "itemtype": "property",
            "name": "dynamicsCompressorNode",
            "type": "{AudioNode}",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 109,
            "description": "A GainNode for controlling master volume. It is connected to {{#crossLink \"WebAudioPlugin/dynamicsCompressorNode:property\"}}{{/crossLink}}.\n\nCan be accessed by advanced users through createjs.Sound.activePlugin.gainNode.",
            "itemtype": "property",
            "name": "gainNode",
            "type": "{AudioGainNode}",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 131,
            "description": "The capabilities of the plugin. This is generated via the {{#crossLink \"WebAudioPlugin/_generateCapabilities:method\"}}{{/crossLink}}\nmethod and is used internally.",
            "itemtype": "property",
            "name": "_capabilities",
            "type": "{Object}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 142,
            "description": "Value to set panning model to equal power for WebAudioSoundInstance.  Can be \"equalpower\" or 0 depending on browser implementation.",
            "itemtype": "property",
            "name": "_panningModel",
            "type": "{Number / String}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 151,
            "description": "The web audio context, which WebAudio uses to play audio. All nodes that interact with the WebAudioPlugin\nneed to be created within this context.\n\nAdvanced users can set this to an existing context, but <b>must</b> do so before they call\n{{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} or {{#crossLink \"Sound/initializeDefaultPlugins\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "context",
            "type": "{AudioContext}",
            "static": 1,
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 164,
            "description": "The scratch buffer that will be assigned to the buffer property of a source node on close.\nWorks around an iOS Safari bug: https://github.com/CreateJS/SoundJS/issues/102\n\nAdvanced users can set this to an existing source node, but <b>must</b> do so before they call\n{{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} or {{#crossLink \"Sound/initializeDefaultPlugins\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "_scratchBuffer",
            "type": "{AudioBuffer}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 178,
            "description": "Indicated whether audio on iOS has been unlocked, which requires a touchend/mousedown event that plays an\nempty sound.",
            "itemtype": "property",
            "name": "_unlocked",
            "type": "{boolean}",
            "since": "0.6.2",
            "access": "private",
            "tagname": "",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 188,
            "description": "The default sample rate used when checking for iOS compatibility. See {{#crossLink \"WebAudioPlugin/_createAudioContext\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "DEFAULT_SAMPLE_REATE",
            "type": "{number}",
            "default": "44100",
            "static": 1,
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 198,
            "description": "Determine if the plugin can be used in the current browser/OS.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "If the plugin can be initialized.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 214,
            "description": "Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they\nrequire the first sound to be played inside of a user initiated event (touch/click).  This is called when\n{{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} is initialized (by Sound {{#crossLink \"Sound/initializeDefaultPlugins\"}}{{/crossLink}}\nfor example).\n\n<h4>Example</h4>\n\n    function handleTouch(event) {\n        createjs.WebAudioPlugin.playEmptySound();\n    }",
            "itemtype": "method",
            "name": "playEmptySound",
            "static": 1,
            "since": "0.4.1",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 240,
            "description": "Determine if XHR is supported, which is necessary for web audio.",
            "itemtype": "method",
            "name": "_isFileXHRSupported",
            "return": {
                "description": "If XHR is supported.",
                "type": "Boolean"
            },
            "since": "0.4.2",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 273,
            "description": "Determine the capabilities of the plugin. Used internally. Please see the Sound API {{#crossLink \"Sound/capabilities:property\"}}{{/crossLink}}\nmethod for an overview of plugin capabilities.",
            "itemtype": "method",
            "name": "_generateCapabilities",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 326,
            "description": "Create an audio context for the sound.\n\nThis method handles both vendor prefixes (specifically webkit support), as well as a case on iOS where\naudio played with a different sample rate may play garbled when first started. The default sample rate is\n44,100, however it can be changed using the {{#crossLink \"WebAudioPlugin/DEFAULT_SAMPLE_RATE:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_createAudioContext",
            "return": {
                "description": "",
                "type": "AudioContext | webkitAudioContext"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "since": "1.0.0",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 363,
            "description": "Set up compatibility if only deprecated web audio calls are supported.\nSee http://www.w3.org/TR/webaudio/#DeprecationNotes\nNeeded so we can support new browsers that don't support deprecated calls (Firefox) as well as old browsers that\ndon't support new calls.",
            "itemtype": "method",
            "name": "_compatibilitySetUp",
            "static": 1,
            "access": "private",
            "tagname": "",
            "since": "0.4.2",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 391,
            "description": "Try to unlock audio on iOS. This is triggered from either WebAudio plugin setup (which will work if inside of\na `mousedown` or `touchend` event stack), or the first document touchend/mousedown event. If it fails (touchend\nwill fail if the user presses for too long, indicating a scroll event instead of a click event.\n\nNote that earlier versions of iOS supported `touchstart` for this, but iOS9 removed this functionality. Adding\na `touchstart` event to support older platforms may preclude a `mousedown` even from getting fired on iOS9, so we\nstick with `mousedown` and `touchend`.",
            "itemtype": "method",
            "name": "_unlock",
            "since": "0.6.2",
            "access": "private",
            "tagname": "",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 422,
            "description": "Set up needed properties on supported classes WebAudioSoundInstance and WebAudioLoader.",
            "itemtype": "method",
            "name": "_addPropsToClasses",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "since": "0.6.0",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioPlugin.js",
            "line": 440,
            "description": "Set the gain value for master audio. Should not be called externally.",
            "itemtype": "method",
            "name": "_updateVolume",
            "access": "protected",
            "tagname": "",
            "class": "WebAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioSoundInstance.js",
            "line": 59,
            "description": "NOTE this is only intended for use by advanced users.\n<br />GainNode for controlling <code>WebAudioSoundInstance</code> volume. Connected to the {{#crossLink \"WebAudioSoundInstance/destinationNode:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "gainNode",
            "type": "{AudioGainNode}",
            "since": "0.4.0",
            "class": "WebAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioSoundInstance.js",
            "line": 69,
            "description": "NOTE this is only intended for use by advanced users.\n<br />A panNode allowing left and right audio channel panning only. Connected to WebAudioSoundInstance {{#crossLink \"WebAudioSoundInstance/gainNode:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "panNode",
            "type": "{AudioPannerNode}",
            "since": "0.4.0",
            "class": "WebAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioSoundInstance.js",
            "line": 81,
            "description": "NOTE this is only intended for use by advanced users.\n<br />sourceNode is the audio source. Connected to WebAudioSoundInstance {{#crossLink \"WebAudioSoundInstance/panNode:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "sourceNode",
            "type": "{AudioNode}",
            "since": "0.4.0",
            "class": "WebAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioSoundInstance.js",
            "line": 93,
            "description": "Timeout that is created internally to handle sound playing to completion.\nStored so we can remove it when stop, pause, or cleanup are called",
            "itemtype": "property",
            "name": "_soundCompleteTimeout",
            "type": "{timeoutVariable}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "since": "0.4.0",
            "class": "WebAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioSoundInstance.js",
            "line": 104,
            "description": "NOTE this is only intended for use by very advanced users.\n_sourceNodeNext is the audio source for the next loop, inserted in a look ahead approach to allow for smooth\nlooping. Connected to {{#crossLink \"WebAudioSoundInstance/gainNode:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "_sourceNodeNext",
            "type": "{AudioNode}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "since": "0.4.1",
            "class": "WebAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioSoundInstance.js",
            "line": 117,
            "description": "Time audio started playback, in seconds. Used to handle set position, get position, and resuming from paused.",
            "itemtype": "property",
            "name": "_playbackStartTime",
            "type": "{Number}",
            "default": "0",
            "access": "protected",
            "tagname": "",
            "since": "0.4.0",
            "class": "WebAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioSoundInstance.js",
            "line": 133,
            "description": "Note this is only intended for use by advanced users.\n<br />Audio context used to create nodes.  This is and needs to be the same context used by {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "context",
            "type": "{AudioContext}",
            "static": 1,
            "since": "0.6.0",
            "class": "WebAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioSoundInstance.js",
            "line": 143,
            "description": "Note this is only intended for use by advanced users.\n<br />The scratch buffer that will be assigned to the buffer property of a source node on close.  \nThis is and should be the same scratch buffer referenced by {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "_scratchBuffer",
            "type": "{AudioBufferSourceNode}",
            "static": 1,
            "class": "WebAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioSoundInstance.js",
            "line": 153,
            "description": "Note this is only intended for use by advanced users.\n<br /> Audio node from WebAudioPlugin that sequences to <code>context.destination</code>",
            "itemtype": "property",
            "name": "destinationNode",
            "type": "{AudioNode}",
            "static": 1,
            "since": "0.6.0",
            "class": "WebAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioSoundInstance.js",
            "line": 163,
            "description": "Value to set panning model to equal power for WebAudioSoundInstance.  Can be \"equalpower\" or 0 depending on browser implementation.",
            "itemtype": "property",
            "name": "_panningModel",
            "type": "{Number / String}",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "since": "0.6.0",
            "class": "WebAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioSoundInstance.js",
            "line": 222,
            "description": "Turn off and disconnect an audioNode, then set reference to null to release it for garbage collection",
            "itemtype": "method",
            "name": "_cleanUpAudioNode",
            "params": [
                {
                    "name": "audioNode",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "AudioNode"
            },
            "access": "protected",
            "tagname": "",
            "since": "0.4.1",
            "class": "WebAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/webaudio/WebAudioSoundInstance.js",
            "line": 259,
            "description": "Creates an audio node using the current src and context, connects it to the gain node, and starts playback.",
            "itemtype": "method",
            "name": "_createAndPlayAudioNode",
            "params": [
                {
                    "name": "startTime",
                    "description": "The time to add this to the web audio context, in seconds.",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "The amount of time into the src audio to start playback, in seconds.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "AudioNode"
            },
            "access": "protected",
            "tagname": "",
            "since": "0.4.1",
            "class": "WebAudioSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 47,
            "description": "The capabilities of the plugin.\nmethod and is used internally.",
            "itemtype": "property",
            "name": "_capabilities",
            "type": "{Object}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 58,
            "description": "Object hash indexed by the source URI of all created loaders, used to properly destroy them if sources are removed.",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 65,
            "description": "Object hash indexed by the source URI of each file to indicate if an audio source has begun loading,\nis currently loading, or has completed loading.  Can be used to store non boolean data after loading\nis complete (for example arrayBuffers for web audio).",
            "itemtype": "property",
            "name": "_audioSources",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 75,
            "description": "Object hash indexed by the source URI of all created SoundInstances, updates the playbackResource if it loads after they are created,\nand properly destroy them if sources are removed",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 83,
            "description": "The internal master volume value of the plugin.",
            "itemtype": "property",
            "name": "_volume",
            "type": "{Number}",
            "default": "1",
            "access": "protected",
            "tagname": "",
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 92,
            "description": "A reference to a loader class used by a plugin that must be set.",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 99,
            "description": "A reference to an AbstractSoundInstance class used by a plugin that must be set.",
            "type": "{Object}",
            "access": "protected",
            "tagname": ";",
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 110,
            "description": "The capabilities of the plugin. This is generated via the _generateCapabilities method and is used internally.",
            "itemtype": "property",
            "name": "_capabilities",
            "type": "{Object}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 120,
            "description": "Determine if the plugin can be used in the current browser/OS.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "If the plugin can be initialized.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 132,
            "description": "Pre-register a sound for preloading and setup. This is called by {{#crossLink \"Sound\"}}{{/crossLink}}.\nNote all plugins provide a <code>Loader</code> instance, which <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>\ncan use to assist with preloading.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "loadItem",
                    "description": "An Object containing the source of the audio\nNote that not every plugin will manage this value.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A result object, containing a \"tag\" for preloading purposes.",
                "type": "Object"
            },
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 154,
            "description": "Internally preload a sound.",
            "itemtype": "method",
            "name": "preload",
            "params": [
                {
                    "name": "loader",
                    "description": "The sound URI to load.",
                    "type": "Loader"
                }
            ],
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 164,
            "description": "Checks if preloading has started for a specific source. If the source is found, we can assume it is loading,\nor has already finished loading.",
            "itemtype": "method",
            "name": "isPreloadStarted",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 175,
            "description": "Checks if preloading has finished for a specific source.",
            "itemtype": "method",
            "name": "isPreloadComplete",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to load.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 185,
            "description": "Remove a sound added using {{#crossLink \"WebAudioPlugin/register\"}}{{/crossLink}}. Note this does not cancel a preload.",
            "itemtype": "method",
            "name": "removeSound",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to unload.",
                    "type": "String"
                }
            ],
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 202,
            "description": "Remove all sounds added using {{#crossLink \"WebAudioPlugin/register\"}}{{/crossLink}}. Note this does not cancel a preload.",
            "itemtype": "method",
            "name": "removeAllSounds",
            "params": [
                {
                    "name": "src",
                    "description": "The sound URI to unload.",
                    "type": "String"
                }
            ],
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 213,
            "description": "Create a sound instance. If the sound has not been preloaded, it is internally preloaded here.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "src",
                    "description": "The sound source to use.",
                    "type": "String"
                },
                {
                    "name": "startTime",
                    "description": "Audio sprite property used to apply an offset, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "Audio sprite property used to set the time the clip plays for, in milliseconds.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A sound instance for playback and control.",
                "type": "AbstractSoundInstance"
            },
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 239,
            "description": "Set the master volume of the plugin, which affects all SoundInstances.",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "value",
                    "description": "The volume to set, between 0 and 1.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "If the plugin processes the setVolume call (true). The Sound class will affect all the\ninstances manually otherwise.",
                "type": "Boolean"
            },
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 252,
            "description": "Get the master volume of the plugin, which affects all SoundInstances.",
            "itemtype": "method",
            "name": "getVolume",
            "return": {
                "description": "The volume level, between 0 and 1.",
                "type": "Number"
            },
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 261,
            "description": "Mute all sounds via the plugin.",
            "itemtype": "method",
            "name": "setMute",
            "params": [
                {
                    "name": "value",
                    "description": "If all sound should be muted or not. Note that plugin-level muting just looks up\nthe mute value of Sound {{#crossLink \"Sound/muted:property\"}}{{/crossLink}}, so this property is not used here.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "If the mute call succeeds.",
                "type": "Boolean"
            },
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 280,
            "description": "Handles internal preload completion.",
            "itemtype": "method",
            "name": "_handlePreloadComplete",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 297,
            "description": "Handles internal preload errors",
            "itemtype": "method",
            "name": "_handlePreloadError",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractPlugin.js",
            "line": 307,
            "description": "Set the gain value for master audio. Should not be called externally.",
            "itemtype": "method",
            "name": "_updateVolume",
            "access": "protected",
            "tagname": "",
            "class": "AbstractPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 84,
            "description": "The source of the sound.",
            "itemtype": "property",
            "name": "src",
            "type": "{String}",
            "default": "null",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 92,
            "description": "The unique ID of the instance. This is set by {{#crossLink \"Sound\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "uniqueId",
            "type": "{String} | Number",
            "default": "-1",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 100,
            "description": "The play state of the sound. Play states are defined as constants on {{#crossLink \"Sound\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "playState",
            "type": "{String}",
            "default": "null",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 108,
            "description": "A Timeout created by {{#crossLink \"Sound\"}}{{/crossLink}} when this AbstractSoundInstance is played with a delay.\nThis allows AbstractSoundInstance to remove the delay if stop, pause, or cleanup are called before playback begins.",
            "itemtype": "property",
            "name": "delayTimeoutId",
            "type": "{timeoutVariable}",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "since": "0.4.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 124,
            "description": "The volume of the sound, between 0 and 1.\n\nThe actual output volume of a sound can be calculated using:\n<code>myInstance.volume * createjs.Sound._getVolume();</code>",
            "itemtype": "property",
            "name": "volume",
            "type": "{Number}",
            "default": "1",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 140,
            "description": "The pan of the sound, between -1 (left) and 1 (right). Note that pan is not supported by HTML Audio.\n\nNote in WebAudioPlugin this only gives us the \"x\" value of what is actually 3D audio",
            "itemtype": "property",
            "name": "pan",
            "type": "{Number}",
            "default": "0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 154,
            "description": "Audio sprite property used to determine the starting offset.",
            "itemtype": "property",
            "name": "startTime",
            "type": "{Number}",
            "default": "0",
            "since": "0.6.1",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 167,
            "description": "Sets or gets the length of the audio clip, value is in milliseconds.",
            "itemtype": "property",
            "name": "duration",
            "type": "{Number}",
            "default": "0",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 181,
            "description": "Object that holds plugin specific resource need for audio playback.\nThis is set internally by the plugin.  For example, WebAudioPlugin will set an array buffer,\nHTMLAudioPlugin will set a tag, FlashAudioPlugin will set a flash reference.",
            "itemtype": "property",
            "name": "playbackResource",
            "type": "{Object}",
            "default": "null",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 197,
            "description": "The position of the playhead in milliseconds. This can be set while a sound is playing, paused, or stopped.",
            "itemtype": "property",
            "name": "position",
            "type": "{Number}",
            "default": "0",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 211,
            "description": "The number of play loops remaining. Negative values will loop infinitely.",
            "itemtype": "property",
            "name": "loop",
            "type": "{Number}",
            "default": "0",
            "access": "public",
            "tagname": "",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 226,
            "description": "Mutes or unmutes the current audio instance.",
            "itemtype": "property",
            "name": "muted",
            "type": "{Boolean}",
            "default": "false",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 240,
            "description": "Pauses or resumes the current audio instance.",
            "itemtype": "property",
            "name": "paused",
            "type": "{Boolean}",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 254,
            "description": "The event that is fired when playback has started successfully.",
            "itemtype": "event",
            "name": "succeeded",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.4.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 262,
            "description": "The event that is fired when playback is interrupted. This happens when another sound with the same\nsrc property is played using an interrupt value that causes this instance to stop playing.",
            "itemtype": "event",
            "name": "interrupted",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.4.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 271,
            "description": "The event that is fired when playback has failed. This happens when there are too many channels with the same\nsrc property already playing (and the interrupt value doesn't cause an interrupt of another instance), or\nthe sound could not be played, perhaps due to a 404 error.",
            "itemtype": "event",
            "name": "failed",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.4.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 281,
            "description": "The event that is fired when a sound has completed playing but has loops remaining.",
            "itemtype": "event",
            "name": "loop",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.4.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 289,
            "description": "The event that is fired when playback completes. This means that the sound has finished playing in its\nentirety, including its loop iterations.",
            "itemtype": "event",
            "name": "complete",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.4.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 302,
            "description": "Play an instance. This method is intended to be called on SoundInstances that already exist (created\nwith the Sound API {{#crossLink \"Sound/createInstance\"}}{{/crossLink}} or {{#crossLink \"Sound/play\"}}{{/crossLink}}).\n\n<h4>Example</h4>\n\n     var myInstance = createjs.Sound.createInstance(mySrc);\n     myInstance.play({interrupt:createjs.Sound.INTERRUPT_ANY, loop:2, pan:0.5});\n\nNote that if this sound is already playing, this call will still set the passed in parameters.\n\n<b>Parameters Deprecated</b><br />\nThe parameters for this method are deprecated in favor of a single parameter that is an Object or {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "props",
                    "description": "A PlayPropsConfig instance, or an object that contains the parameters to\nplay a sound. See the {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}} for more info.",
                    "type": "Object | PlayPropsConfig"
                }
            ],
            "return": {
                "description": "A reference to itself, intended for chaining calls.",
                "type": "AbstractSoundInstance"
            },
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 333,
            "description": "Stop playback of the instance. Stopped sounds will reset their position to 0, and calls to {{#crossLink \"AbstractSoundInstance/resume\"}}{{/crossLink}}\nwill fail. To start playback again, call {{#crossLink \"AbstractSoundInstance/play\"}}{{/crossLink}}.\n\nIf you don't want to lose your position use yourSoundInstance.paused = true instead. {{#crossLink \"AbstractSoundInstance/paused\"}}{{/crossLink}}.\n\n<h4>Example</h4>\n\n    myInstance.stop();",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "A reference to itself, intended for chaining calls.",
                "type": "AbstractSoundInstance"
            },
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 355,
            "description": "Remove all external references and resources from AbstractSoundInstance.  Note this is irreversible and AbstractSoundInstance will no longer work",
            "itemtype": "method",
            "name": "destroy",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 368,
            "description": "Takes an PlayPropsConfig or Object with the same properties and sets them on this instance.",
            "itemtype": "method",
            "name": "applyPlayProps",
            "params": [
                {
                    "name": "playProps",
                    "description": "A PlayPropsConfig or object containing the same properties.",
                    "type": "PlayPropsConfig | Object"
                }
            ],
            "since": "0.6.1",
            "return": {
                "description": "A reference to itself, intended for chaining calls.",
                "type": "AbstractSoundInstance"
            },
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 392,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/paused:property\"}}{{/crossLink}} directly as a property.",
            "itemtype": "method",
            "name": "_getPaused",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "If the instance is currently paused",
                "type": "Boolean"
            },
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 403,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/paused:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_setPaused",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "since": "0.6.0",
            "return": {
                "description": "A reference to itself, intended for chaining calls.",
                "type": "AbstractSoundInstance"
            },
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 424,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/volume:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_setVolume",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "The volume to set, between 0 and 1.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A reference to itself, intended for chaining calls.",
                "type": "AbstractSoundInstance"
            },
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 440,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/volume:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_getVolume",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "The current volume of the sound instance.",
                "type": "Number"
            },
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 450,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/muted:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_setMuted",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "If the sound should be muted.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "A reference to itself, intended for chaining calls.",
                "type": "AbstractSoundInstance"
            },
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 465,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/muted:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_getMuted",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "If the sound is muted.",
                "type": "Boolean"
            },
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 476,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/pan:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_setPan",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "The pan value, between -1 (left) and 1 (right).",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns reference to itself for chaining calls",
                "type": "AbstractSoundInstance"
            },
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 490,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/pan:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_getPan",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "The value of the pan, between -1 (left) and 1 (right).",
                "type": "Number"
            },
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 500,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/position:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_getPosition",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "The position of the playhead in the sound, in milliseconds.",
                "type": "Number"
            },
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 513,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/position:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_setPosition",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "The position to place the playhead, in milliseconds.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns reference to itself for chaining calls",
                "type": "AbstractSoundInstance"
            },
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 528,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/startTime:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_getStartTime",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "The startTime of the sound instance in milliseconds.",
                "type": "Number"
            },
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 538,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/startTime:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_setStartTime",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "The new startTime time in milli seconds.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns reference to itself for chaining calls",
                "type": "AbstractSoundInstance"
            },
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 552,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/duration:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_getDuration",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "The duration of the sound instance in milliseconds.",
                "type": "Number"
            },
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 562,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/duration:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_setDuration",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "The new duration time in milli seconds.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns reference to itself for chaining calls",
                "type": "AbstractSoundInstance"
            },
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 577,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/playbackResource:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_setPlaybackResource",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "The new playback resource.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns reference to itself for chaining calls",
                "type": "AbstractSoundInstance"
            },
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 591,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/playbackResource:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_getPlaybackResource",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "The new playback resource.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "playback resource used for playing audio",
                "type": "Object"
            },
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 603,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/loop:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_getLoop",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Number"
            },
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 614,
            "description": "Please use {{#crossLink \"AbstractSoundInstance/loop:property\"}}{{/crossLink}} directly as a property",
            "itemtype": "method",
            "name": "_setLoop",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "The number of times to loop after play.",
                    "type": "Number"
                }
            ],
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 637,
            "description": "A helper method that dispatches all events for AbstractSoundInstance.",
            "itemtype": "method",
            "name": "_sendEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 648,
            "description": "Clean up the instance. Remove references and clean up any additional properties such as timers.",
            "itemtype": "method",
            "name": "_cleanUp",
            "access": "protected",
            "tagname": "",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 661,
            "description": "The sound has been interrupted.",
            "itemtype": "method",
            "name": "_interrupt",
            "access": "protected",
            "tagname": "",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 672,
            "description": "Called by the Sound class when the audio is ready to play (delay has completed). Starts sound playing if the\nsrc is loaded, otherwise playback will fail.",
            "itemtype": "method",
            "name": "_beginPlaying",
            "params": [
                {
                    "name": "playProps",
                    "description": "A PlayPropsConfig object.",
                    "type": "PlayPropsConfig"
                }
            ],
            "return": {
                "description": "If playback succeeded.",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 703,
            "description": "Play has failed, which can happen for a variety of reasons.\nCleans up instance and dispatches failed event",
            "itemtype": "method",
            "name": "_playFailed",
            "access": "private",
            "tagname": "",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 715,
            "description": "Audio has finished playing. Manually loop it if required.",
            "itemtype": "method",
            "name": "_handleSoundComplete",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 737,
            "description": "Handles starting playback when the sound is ready for playing.",
            "itemtype": "method",
            "name": "_handleSoundReady",
            "access": "protected",
            "tagname": "",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 746,
            "description": "Internal function used to update the volume based on the instance volume, master volume, instance mute value,\nand master mute value.",
            "itemtype": "method",
            "name": "_updateVolume",
            "access": "protected",
            "tagname": "",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 756,
            "description": "Internal function used to update the pan",
            "itemtype": "method",
            "name": "_updatePan",
            "access": "protected",
            "tagname": "",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 766,
            "description": "Internal function used to update the startTime of the audio.",
            "itemtype": "method",
            "name": "_updateStartTime",
            "access": "protected",
            "tagname": "",
            "since": "0.6.1",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 776,
            "description": "Internal function used to update the duration of the audio.",
            "itemtype": "method",
            "name": "_updateDuration",
            "access": "protected",
            "tagname": "",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 786,
            "description": "Internal function used to get the duration of the audio from the source we'll be playing.",
            "itemtype": "method",
            "name": "_updateDuration",
            "access": "protected",
            "tagname": "",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 796,
            "description": "Internal function that calculates the current position of the playhead and sets this._position to that value",
            "itemtype": "method",
            "name": "_calculateCurrentPosition",
            "access": "protected",
            "tagname": "",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 806,
            "description": "Internal function used to update the position of the playhead.",
            "itemtype": "method",
            "name": "_updatePosition",
            "access": "protected",
            "tagname": "",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 816,
            "description": "Internal function called when looping is removed during playback.",
            "itemtype": "method",
            "name": "_removeLooping",
            "params": [
                {
                    "name": "value",
                    "description": "The number of times to loop after play.",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 827,
            "description": "Internal function called when looping is added during playback.",
            "itemtype": "method",
            "name": "_addLooping",
            "params": [
                {
                    "name": "value",
                    "description": "The number of times to loop after play.",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 838,
            "description": "Internal function called when pausing playback",
            "itemtype": "method",
            "name": "_pause",
            "access": "protected",
            "tagname": "",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 848,
            "description": "Internal function called when resuming playback",
            "itemtype": "method",
            "name": "_resume",
            "access": "protected",
            "tagname": "",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 858,
            "description": "Internal function called when stopping playback",
            "itemtype": "method",
            "name": "_handleStop",
            "access": "protected",
            "tagname": "",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 868,
            "description": "Internal function called when AbstractSoundInstance is being cleaned up",
            "itemtype": "method",
            "name": "_handleCleanUp",
            "access": "protected",
            "tagname": "",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/AbstractSoundInstance.js",
            "line": 878,
            "description": "Internal function called when AbstractSoundInstance has played to end and is looping",
            "itemtype": "method",
            "name": "_handleLoop",
            "access": "protected",
            "tagname": "",
            "since": "0.6.0",
            "class": "AbstractSoundInstance",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 262,
            "description": "The interrupt value to interrupt any currently playing instance with the same source, if the maximum number of\ninstances of the sound are already playing.",
            "itemtype": "property",
            "name": "INTERRUPT_ANY",
            "type": "{String}",
            "default": "any",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 272,
            "description": "The interrupt value to interrupt the earliest currently playing instance with the same source that progressed the\nleast distance in the audio track, if the maximum number of instances of the sound are already playing.",
            "itemtype": "property",
            "name": "INTERRUPT_EARLY",
            "type": "{String}",
            "default": "early",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 282,
            "description": "The interrupt value to interrupt the currently playing instance with the same source that progressed the most\ndistance in the audio track, if the maximum number of instances of the sound are already playing.",
            "itemtype": "property",
            "name": "INTERRUPT_LATE",
            "type": "{String}",
            "default": "late",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 292,
            "description": "The interrupt value to not interrupt any currently playing instances with the same source, if the maximum number of\ninstances of the sound are already playing.",
            "itemtype": "property",
            "name": "INTERRUPT_NONE",
            "type": "{String}",
            "default": "none",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 302,
            "description": "Defines the playState of an instance that is still initializing.",
            "itemtype": "property",
            "name": "PLAY_INITED",
            "type": "{String}",
            "default": "playInited",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 311,
            "description": "Defines the playState of an instance that is currently playing or paused.",
            "itemtype": "property",
            "name": "PLAY_SUCCEEDED",
            "type": "{String}",
            "default": "playSucceeded",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 320,
            "description": "Defines the playState of an instance that was interrupted by another instance.",
            "itemtype": "property",
            "name": "PLAY_INTERRUPTED",
            "type": "{String}",
            "default": "playInterrupted",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 329,
            "description": "Defines the playState of an instance that completed playback.",
            "itemtype": "property",
            "name": "PLAY_FINISHED",
            "type": "{String}",
            "default": "playFinished",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 338,
            "description": "Defines the playState of an instance that failed to play. This is usually caused by a lack of available channels\nwhen the interrupt mode was \"INTERRUPT_NONE\", the playback stalled, or the sound could not be found.",
            "itemtype": "property",
            "name": "PLAY_FAILED",
            "type": "{String}",
            "default": "playFailed",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 348,
            "description": "A list of the default supported extensions that Sound will <i>try</i> to play. Plugins will check if the browser\ncan play these types, so modifying this list before a plugin is initialized will allow the plugins to try to\nsupport additional media types.\n\nNOTE this does not currently work for {{#crossLink \"FlashAudioPlugin\"}}{{/crossLink}}.\n\nMore details on file formats can be found at <a href=\"http://en.wikipedia.org/wiki/Audio_file_format\" target=\"_blank\">http://en.wikipedia.org/wiki/Audio_file_format</a>.<br />\nA very detailed list of file formats can be found at <a href=\"http://www.fileinfo.com/filetypes/audio\" target=\"_blank\">http://www.fileinfo.com/filetypes/audio</a>.",
            "itemtype": "property",
            "name": "SUPPORTED_EXTENSIONS",
            "type": "{Array[String]}",
            "default": "[\"mp3\", \"ogg\", \"opus\", \"mpeg\", \"wav\", \"m4a\", \"mp4\", \"aiff\", \"wma\", \"mid\"]",
            "since": "0.4.0",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 365,
            "description": "Some extensions use another type of extension support to play (one of them is a codex).  This allows you to map\nthat support so plugins can accurately determine if an extension is supported.  Adding to this list can help\nplugins determine more accurately if an extension is supported.\n\nA useful list of extensions for each format can be found at <a href=\"http://html5doctor.com/html5-audio-the-state-of-play/\" target=\"_blank\">http://html5doctor.com/html5-audio-the-state-of-play/</a>.",
            "itemtype": "property",
            "name": "EXTENSION_MAP",
            "type": "{Object}",
            "since": "0.4.0",
            "default": "{m4a:\"mp4\"}",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 381,
            "description": "The RegExp pattern used to parse file URIs. This supports simple file names, as well as full domain URIs with\nquery strings. The resulting match is: protocol:$1 domain:$2 path:$3 file:$4 extension:$5 query:$6.",
            "itemtype": "property",
            "name": "FILE_PATTERN",
            "type": "{RegExp}",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 393,
            "description": "Determines the default behavior for interrupting other currently playing instances with the same source, if the\nmaximum number of instances of the sound are already playing.  Currently the default is {{#crossLink \"Sound/INTERRUPT_NONE:property\"}}{{/crossLink}}\nbut this can be set and will change playback behavior accordingly.  This is only used when {{#crossLink \"Sound/play\"}}{{/crossLink}}\nis called without passing a value for interrupt.",
            "itemtype": "property",
            "name": "defaultInterruptBehavior",
            "type": "{String}",
            "default": "Sound.INTERRUPT_NONE, or \"none\"",
            "static": 1,
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 406,
            "description": "An array of extensions to attempt to use when loading sound, if the default is unsupported by the active plugin.\nThese are applied in order, so if you try to Load Thunder.ogg in a browser that does not support ogg, and your\nextensions array is [\"mp3\", \"m4a\", \"wav\"] it will check mp3 support, then m4a, then wav. The audio files need\nto exist in the same location, as only the extension is altered.\n\nNote that regardless of which file is loaded, you can call {{#crossLink \"Sound/createInstance\"}}{{/crossLink}}\nand {{#crossLink \"Sound/play\"}}{{/crossLink}} using the same id or full source path passed for loading.\n\n<h4>Example</h4>\n\n\tvar sounds = [\n\t\t{src:\"myPath/mySound.ogg\", id:\"example\"},\n\t];\n\tcreatejs.Sound.alternateExtensions = [\"mp3\"]; // now if ogg is not supported, SoundJS will try asset0.mp3\n\tcreatejs.Sound.on(\"fileload\", handleLoad); // call handleLoad when each sound loads\n\tcreatejs.Sound.registerSounds(sounds, assetPath);\n\t// ...\n\tcreatejs.Sound.play(\"myPath/mySound.ogg\"); // works regardless of what extension is supported.  Note calling with ID is a better approach",
            "itemtype": "property",
            "name": "alternateExtensions",
            "type": "{Array}",
            "since": "0.5.2",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 433,
            "description": "The currently active plugin. If this is null, then no plugin could be initialized. If no plugin was specified,\nSound attempts to apply the default plugins: {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}, followed by\n{{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "activePlugin",
            "type": "{Object}",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 446,
            "description": "Set the master volume of Sound. The master volume is multiplied against each sound's individual volume.  For\nexample, if master volume is 0.5 and a sound's volume is 0.5, the resulting volume is 0.25. To set individual\nsound volume, use AbstractSoundInstance {{#crossLink \"AbstractSoundInstance/volume:property\"}}{{/crossLink}}\ninstead.\n\n<h4>Example</h4>\n\n    createjs.Sound.volume = 0.5;",
            "itemtype": "property",
            "name": "volume",
            "type": "{Number}",
            "default": "1",
            "since": "0.6.1",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 462,
            "description": "The internal volume level. Use {{#crossLink \"Sound/volume:property\"}}{{/crossLink}} to adjust the master volume.",
            "itemtype": "property",
            "name": "_masterVolume",
            "type": "{number}",
            "default": "1",
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 471,
            "description": "Use the {{#crossLink \"Sound/volume:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "_getMasterVolume",
            "access": "private",
            "tagname": "",
            "static": 1,
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 483,
            "description": "Use the {{#crossLink \"Sound/volume:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "_setMasterVolume",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 503,
            "description": "Mute/Unmute all audio. Note that muted audio still plays at 0 volume. This global mute value is maintained\nseparately and when set will override, but not change the mute property of individual instances. To mute an individual\ninstance, use AbstractSoundInstance {{#crossLink \"AbstractSoundInstance/muted:property\"}}{{/crossLink}} instead.\n\n<h4>Example</h4>\n\n    createjs.Sound.muted = true;",
            "itemtype": "property",
            "name": "muted",
            "type": "{Boolean}",
            "default": "false",
            "since": "0.6.1",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 520,
            "description": "Use the {{#crossLink \"Sound/muted:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "_getMute",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 533,
            "description": "Use the {{#crossLink \"Sound/muted:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "_setMute",
            "params": [
                {
                    "name": "value",
                    "description": "The muted value",
                    "type": "Boolean"
                }
            ],
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 553,
            "description": "Get the active plugins capabilities, which help determine if a plugin can be used in the current environment,\nor if the plugin supports a specific feature. Capabilities include:\n<ul>\n    <li><b>panning:</b> If the plugin can pan audio from left to right</li>\n    <li><b>volume;</b> If the plugin can control audio volume.</li>\n    <li><b>tracks:</b> The maximum number of audio tracks that can be played back at a time. This will be -1\n    if there is no known limit.</li>\n<br />An entry for each file type in {{#crossLink \"Sound/SUPPORTED_EXTENSIONS:property\"}}{{/crossLink}}:\n    <li><b>mp3:</b> If MP3 audio is supported.</li>\n    <li><b>ogg:</b> If OGG audio is supported.</li>\n    <li><b>wav:</b> If WAV audio is supported.</li>\n    <li><b>mpeg:</b> If MPEG audio is supported.</li>\n    <li><b>m4a:</b> If M4A audio is supported.</li>\n    <li><b>mp4:</b> If MP4 audio is supported.</li>\n    <li><b>aiff:</b> If aiff audio is supported.</li>\n    <li><b>wma:</b> If wma audio is supported.</li>\n    <li><b>mid:</b> If mid audio is supported.</li>\n</ul>\n\nYou can get a specific capability of the active plugin using standard object notation\n\n<h4>Example</h4>\n\n     var mp3 = createjs.Sound.capabilities.mp3;\n\nNote this property is read only.",
            "itemtype": "property",
            "name": "capabilities",
            "type": "{Object}",
            "static": 1,
            "readonly": "",
            "since": "0.6.1",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 588,
            "description": "Use the {{#crossLink \"Sound/capabilities:property\"}}{{/crossLink}} property instead.",
            "return": {
                "description": "",
                "type": "Null"
            },
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 608,
            "description": "Determines if the plugins have been registered. If false, the first call to {{#crossLink \"play\"}}{{/crossLink}} will instantiate the default\nplugins ({{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}, followed by {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}).\nIf plugins have been registered, but none are applicable, then sound playback will fail.",
            "itemtype": "property",
            "name": "_pluginsRegistered",
            "type": "{Boolean}",
            "default": "false",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 620,
            "description": "Used internally to assign unique IDs to each AbstractSoundInstance.",
            "itemtype": "property",
            "name": "_lastID",
            "type": "{Number}",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 629,
            "description": "An array containing all currently playing instances. This allows Sound to control the volume, mute, and playback of\nall instances when using static APIs like {{#crossLink \"Sound/stop\"}}{{/crossLink}} and {{#crossLink \"Sound/volume:property\"}}{{/crossLink}}.\nWhen an instance has finished playback, it gets removed via the {{#crossLink \"Sound/finishedPlaying\"}}{{/crossLink}}\nmethod. If the user replays an instance, it gets added back in via the {{#crossLink \"Sound/_beginPlaying\"}}{{/crossLink}}\nmethod.",
            "itemtype": "property",
            "name": "_instances",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 642,
            "description": "An object hash storing objects with sound sources, startTime, and duration via there corresponding ID.",
            "itemtype": "property",
            "name": "_idHash",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 651,
            "description": "An object hash that stores preloading sound sources via the parsed source that is passed to the plugin.  Contains the\nsource, id, and data that was passed in by the user.  Parsed sources can contain multiple instances of source, id,\nand data.",
            "itemtype": "property",
            "name": "_preloadHash",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 662,
            "description": "An object hash storing {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}} via the parsed source that is passed as defaultPlayProps in\n{{#crossLink \"Sound/registerSound\"}}{{/crossLink}} and {{#crossLink \"Sound/registerSounds\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "_defaultPlayPropsHash",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "static": 1,
            "since": "0.6.1",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 686,
            "description": "This event is fired when a file finishes loading internally. This event is fired for each loaded sound,\nso any handler methods should look up the <code>event.src</code> to handle a particular sound.",
            "itemtype": "event",
            "name": "fileload",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "The source of the sound that was loaded.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "The id passed in when the sound was registered. If one was not provided, it will be null.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "Any additional data associated with the item. If not provided, it will be undefined.",
                    "type": "Number|Object",
                    "optional": true
                }
            ],
            "since": "0.4.1",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 698,
            "description": "This event is fired when a file fails loading internally. This event is fired for each loaded sound,\nso any handler methods should look up the <code>event.src</code> to handle a particular sound.",
            "itemtype": "event",
            "name": "fileerror",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "The source of the sound that was loaded.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "The id passed in when the sound was registered. If one was not provided, it will be null.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "Any additional data associated with the item. If not provided, it will be undefined.",
                    "type": "Number|Object",
                    "optional": true
                }
            ],
            "since": "0.6.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 712,
            "description": "Get the preload rules to allow Sound to be used as a plugin by <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>.\nAny load calls that have the matching type or extension will fire the callback method, and use the resulting\nobject, which is potentially modified by Sound. This helps when determining the correct path, as well as\nregistering the audio instance(s) with Sound. This method should not be called, except by PreloadJS.",
            "itemtype": "method",
            "name": "getPreloadHandlers",
            "return": {
                "description": "An object containing:\n<ul><li>callback: A preload callback that is fired when a file is added to PreloadJS, which provides\n     Sound a mechanism to modify the load parameters, select the correct file format, register the sound, etc.</li>\n     <li>types: A list of file types that are supported by Sound (currently supports \"sound\").</li>\n     <li>extensions: A list of file extensions that are supported by Sound (see {{#crossLink \"Sound/SUPPORTED_EXTENSIONS:property\"}}{{/crossLink}}).</li></ul>",
                "type": "Object"
            },
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 734,
            "description": "Used to dispatch fileload events from internal loading.",
            "itemtype": "method",
            "name": "_handleLoadComplete",
            "params": [
                {
                    "name": "event",
                    "description": "A loader event."
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "since": "0.6.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 762,
            "description": "Used to dispatch error events from internal preloading.",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.6.0",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 789,
            "description": "Used by {{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} to register a Sound plugin.",
            "itemtype": "method",
            "name": "_registerPlugin",
            "params": [
                {
                    "name": "plugin",
                    "description": "The plugin class to install.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Whether the plugin was successfully initialized.",
                "type": "Boolean"
            },
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 807,
            "description": "Register a list of Sound plugins, in order of precedence. To register a single plugin, pass a single element in the array.\n\n<h4>Example</h4>\n\n     createjs.FlashAudioPlugin.swfPath = \"../src/soundjs/flashaudio/\";\n     createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin, createjs.FlashAudioPlugin]);",
            "itemtype": "method",
            "name": "registerPlugins",
            "params": [
                {
                    "name": "plugins",
                    "description": "An array of plugins classes to install.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Whether a plugin was successfully initialized.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 830,
            "description": "Initialize the default plugins. This method is automatically called when any audio is played or registered before\nthe user has manually registered plugins, and enables Sound to work without manual plugin setup. Currently, the\ndefault plugins are {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} followed by {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}.\n\n<h4>Example</h4>\n\n\tif (!createjs.initializeDefaultPlugins()) { return; }",
            "itemtype": "method",
            "name": "initializeDefaultPlugins",
            "return": {
                "description": "True if a plugin was initialized, false otherwise.",
                "type": "Boolean"
            },
            "since": "0.4.0",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 851,
            "description": "Determines if Sound has been initialized, and a plugin has been activated.\n\n<h4>Example</h4>\nThis example sets up a Flash fallback, but only if there is no plugin specified yet.\n\n\tif (!createjs.Sound.isReady()) {\n\t\tcreatejs.FlashAudioPlugin.swfPath = \"../src/soundjs/flashaudio/\";\n\t\tcreatejs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin, createjs.FlashAudioPlugin]);\n\t}",
            "itemtype": "method",
            "name": "isReady",
            "return": {
                "description": "If Sound has initialized a plugin.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 870,
            "description": "Process manifest items from <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>. This method is intended\nfor usage by a plugin, and not for direct interaction.",
            "itemtype": "method",
            "name": "initLoad",
            "params": [
                {
                    "name": "src",
                    "description": "The object to load.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An instance of AbstractLoader.",
                "type": "Object|AbstractLoader"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 884,
            "description": "Internal method for loading sounds.  This should not be called directly.",
            "itemtype": "method",
            "name": "_registerSound",
            "params": [
                {
                    "name": "src",
                    "description": "The object to load, containing src property and optionally containing id and data.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object with the modified values that were passed in, which defines the sound.\nReturns false if the source cannot be parsed or no plugins can be initialized.\nReturns true if the source is already loaded.",
                "type": "Object"
            },
            "static": 1,
            "access": "private",
            "tagname": "",
            "since": "0.6.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 952,
            "description": "Register an audio file for loading and future playback in Sound. This is automatically called when using\n<a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>.  It is recommended to register all sounds that\nneed to be played back in order to properly prepare and preload them. Sound does internal preloading when required.\n\n<h4>Example</h4>\n\n     createjs.Sound.alternateExtensions = [\"mp3\"];\n     createjs.Sound.on(\"fileload\", handleLoad); // add an event listener for when load is completed\n     createjs.Sound.registerSound(\"myAudioPath/mySound.ogg\", \"myID\", 3);\n     createjs.Sound.registerSound({ogg:\"path1/mySound.ogg\", mp3:\"path2/mySoundNoExtension\"}, \"myID\", 3);",
            "itemtype": "method",
            "name": "registerSound",
            "params": [
                {
                    "name": "src",
                    "description": "The source or an Object with a \"src\" property or an Object with multiple extension labeled src properties.",
                    "type": "String | Object"
                },
                {
                    "name": "id",
                    "description": "An id specified by the user to play the sound later.  Note id is required for when src is multiple extension labeled src properties.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "Data associated with the item. Sound uses the data parameter as the number of\nchannels for an audio instance, however a \"channels\" property can be appended to the data object if it is used\nfor other information. The audio channels will set a default based on plugin if no value is found.\nSound also uses the data property to hold an {{#crossLink \"AudioSprite\"}}{{/crossLink}} array of objects in the following format {id, startTime, duration}.<br/>\n  id used to play the sound later, in the same manner as a sound src with an id.<br/>\n  startTime is the initial offset to start playback and loop from, in milliseconds.<br/>\n  duration is the amount of time to play the clip for, in milliseconds.<br/>\nThis allows Sound to support audio sprites that are played back by id.",
                    "type": "Number | Object",
                    "optional": true
                },
                {
                    "name": "basePath",
                    "description": "Set a path that will be prepended to src for loading.",
                    "type": "String"
                },
                {
                    "name": "defaultPlayProps",
                    "description": "Optional Playback properties that will be set as the defaults on any new AbstractSoundInstance.\nSee {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}} for options.",
                    "type": "Object | PlayPropsConfig"
                }
            ],
            "return": {
                "description": "An object with the modified values that were passed in, which defines the sound.\nReturns false if the source cannot be parsed or no plugins can be initialized.\nReturns true if the source is already loaded.",
                "type": "Object"
            },
            "static": 1,
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1013,
            "description": "Register an array of audio files for loading and future playback in Sound. It is recommended to register all\nsounds that need to be played back in order to properly prepare and preload them. Sound does internal preloading\nwhen required.\n\n<h4>Example</h4>\n\n\t\tvar assetPath = \"./myAudioPath/\";\n     var sounds = [\n         {src:\"asset0.ogg\", id:\"example\"},\n         {src:\"asset1.ogg\", id:\"1\", data:6},\n         {src:\"asset2.mp3\", id:\"works\"}\n         {src:{mp3:\"path1/asset3.mp3\", ogg:\"path2/asset3NoExtension\"}, id:\"better\"}\n     ];\n     createjs.Sound.alternateExtensions = [\"mp3\"];\t// if the passed extension is not supported, try this extension\n     createjs.Sound.on(\"fileload\", handleLoad); // call handleLoad when each sound loads\n     createjs.Sound.registerSounds(sounds, assetPath);",
            "itemtype": "method",
            "name": "registerSounds",
            "params": [
                {
                    "name": "sounds",
                    "description": "An array of objects to load. Objects are expected to be in the format needed for\n{{#crossLink \"Sound/registerSound\"}}{{/crossLink}}: <code>{src:srcURI, id:ID, data:Data}</code>\nwith \"id\" and \"data\" being optional.\nYou can also pass an object with path and manifest properties, where path is a basePath and manifest is an array of objects to load.\nNote id is required if src is an object with extension labeled src properties.",
                    "type": "Array"
                },
                {
                    "name": "basePath",
                    "description": "Set a path that will be prepended to each src when loading.  When creating, playing, or removing\naudio that was loaded with a basePath by src, the basePath must be included.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An array of objects with the modified values that were passed in, which defines each sound.\nLike registerSound, it will return false for any values when the source cannot be parsed or if no plugins can be initialized.\nAlso, it will return true for any values when the source is already loaded.",
                "type": "Object"
            },
            "static": 1,
            "since": "0.6.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1062,
            "description": "Remove a sound that has been registered with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}} or\n{{#crossLink \"Sound/registerSounds\"}}{{/crossLink}}.\n<br />Note this will stop playback on active instances playing this sound before deleting them.\n<br />Note if you passed in a basePath, you need to pass it or prepend it to the src here.\n\n<h4>Example</h4>\n\n     createjs.Sound.removeSound(\"myID\");\n     createjs.Sound.removeSound(\"myAudioBasePath/mySound.ogg\");\n     createjs.Sound.removeSound(\"myPath/myOtherSound.mp3\", \"myBasePath/\");\n     createjs.Sound.removeSound({mp3:\"musicNoExtension\", ogg:\"music.ogg\"}, \"myBasePath/\");",
            "itemtype": "method",
            "name": "removeSound",
            "params": [
                {
                    "name": "src",
                    "description": "The src or ID of the audio, or an Object with a \"src\" property, or an Object with multiple extension labeled src properties.",
                    "type": "String | Object"
                },
                {
                    "name": "basePath",
                    "description": "Set a path that will be prepended to each src when removing.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if sound is successfully removed.",
                "type": "Boolean"
            },
            "static": 1,
            "since": "0.4.1",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1114,
            "description": "Remove an array of audio files that have been registered with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}} or\n{{#crossLink \"Sound/registerSounds\"}}{{/crossLink}}.\n<br />Note this will stop playback on active instances playing this audio before deleting them.\n<br />Note if you passed in a basePath, you need to pass it or prepend it to the src here.\n\n<h4>Example</h4>\n\n\t\tassetPath = \"./myPath/\";\n     var sounds = [\n         {src:\"asset0.ogg\", id:\"example\"},\n         {src:\"asset1.ogg\", id:\"1\", data:6},\n         {src:\"asset2.mp3\", id:\"works\"}\n     ];\n     createjs.Sound.removeSounds(sounds, assetPath);",
            "itemtype": "method",
            "name": "removeSounds",
            "params": [
                {
                    "name": "sounds",
                    "description": "An array of objects to remove. Objects are expected to be in the format needed for\n{{#crossLink \"Sound/removeSound\"}}{{/crossLink}}: <code>{srcOrID:srcURIorID}</code>.\nYou can also pass an object with path and manifest properties, where path is a basePath and manifest is an array of objects to remove.",
                    "type": "Array"
                },
                {
                    "name": "basePath",
                    "description": "Set a path that will be prepended to each src when removing.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An array of Boolean values representing if the sounds with the same array index were\nsuccessfully removed.",
                "type": "Object"
            },
            "static": 1,
            "since": "0.4.1",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1156,
            "description": "Remove all sounds that have been registered with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}} or\n{{#crossLink \"Sound/registerSounds\"}}{{/crossLink}}.\n<br />Note this will stop playback on all active sound instances before deleting them.\n\n<h4>Example</h4>\n\n    createjs.Sound.removeAllSounds();",
            "itemtype": "method",
            "name": "removeAllSounds",
            "static": 1,
            "since": "0.4.1",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1176,
            "description": "Check if a source has been loaded by internal preloaders. This is necessary to ensure that sounds that are\nnot completed preloading will not kick off a new internal preload if they are played.\n\n<h4>Example</h4>\n\n    var mySound = \"assetPath/asset0.ogg\";\n    if(createjs.Sound.loadComplete(mySound) {\n        createjs.Sound.play(mySound);\n    }",
            "itemtype": "method",
            "name": "loadComplete",
            "params": [
                {
                    "name": "src",
                    "description": "The src or id that is being loaded.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If the src is already loaded.",
                "type": "Boolean"
            },
            "since": "0.4.0",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1205,
            "description": "Parse the path of a sound. Alternate extensions will be attempted in order if the\ncurrent extension is not supported",
            "itemtype": "method",
            "name": "_parsePath",
            "params": [
                {
                    "name": "value",
                    "description": "The path to an audio source.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A formatted object that can be registered with the {{#crossLink \"Sound/activePlugin:property\"}}{{/crossLink}}\nand returned to a preloader like <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1235,
            "description": "Parse the path of a sound based on properties of src matching with supported extensions.\nReturns false if none of the properties are supported",
            "itemtype": "method",
            "name": "_parseSrc",
            "params": [
                {
                    "name": "value",
                    "description": "The paths to an audio source, indexed by extension type.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A formatted object that can be registered with the {{#crossLink \"Sound/activePlugin:property\"}}{{/crossLink}}\nand returned to a preloader like <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1271,
            "description": "Play a sound and get a {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} to control. If the sound fails to\nplay, an AbstractSoundInstance will still be returned, and have a playState of {{#crossLink \"Sound/PLAY_FAILED:property\"}}{{/crossLink}}.\nNote that even on sounds with failed playback, you may still be able to call the {{#crossLink \"AbstractSoundInstance/play\"}}{{/crossLink}},\nmethod, since the failure could be due to lack of available channels. If the src does not have a supported\nextension or if there is no available plugin, a default AbstractSoundInstance will still be returned, which will\nnot play any audio, but will not generate errors.\n\n<h4>Example</h4>\n\n     createjs.Sound.on(\"fileload\", handleLoad);\n     createjs.Sound.registerSound(\"myAudioPath/mySound.mp3\", \"myID\", 3);\n     function handleLoad(event) {\n     \tcreatejs.Sound.play(\"myID\");\n     \t// store off AbstractSoundInstance for controlling\n     \tvar myInstance = createjs.Sound.play(\"myID\", {interrupt: createjs.Sound.INTERRUPT_ANY, loop:-1});\n     }\n\nNOTE: To create an audio sprite that has not already been registered, both startTime and duration need to be set.\nThis is only when creating a new audio sprite, not when playing using the id of an already registered audio sprite.",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "src",
                    "description": "The src or ID of the audio.",
                    "type": "String"
                },
                {
                    "name": "props",
                    "description": "A PlayPropsConfig instance, or an object that contains the parameters to\nplay a sound. See the {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}} for more info.",
                    "type": "Object | PlayPropsConfig"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} that can be controlled\nafter it is created.",
                "type": "AbstractSoundInstance"
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1308,
            "description": "Creates a {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} using the passed in src. If the src does not have a\nsupported extension or if there is no available plugin, a default AbstractSoundInstance will be returned that can be\ncalled safely but does nothing.\n\n<h4>Example</h4>\n\n     var myInstance = null;\n     createjs.Sound.on(\"fileload\", handleLoad);\n     createjs.Sound.registerSound(\"myAudioPath/mySound.mp3\", \"myID\", 3);\n     function handleLoad(event) {\n     \tmyInstance = createjs.Sound.createInstance(\"myID\");\n     \t// alternately we could call the following\n     \tmyInstance = createjs.Sound.createInstance(\"myAudioPath/mySound.mp3\");\n     }\n\nNOTE to create an audio sprite that has not already been registered, both startTime and duration need to be set.\nThis is only when creating a new audio sprite, not when playing using the id of an already registered audio sprite.",
            "itemtype": "method",
            "name": "createInstance",
            "params": [
                {
                    "name": "src",
                    "description": "The src or ID of the audio.",
                    "type": "String"
                },
                {
                    "name": "startTime",
                    "description": "To create an audio sprite (with duration), the initial offset to start playback and loop from, in milliseconds.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "duration",
                    "description": "To create an audio sprite (with startTime), the amount of time to play the clip for, in milliseconds.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} that can be controlled after it is created.\nUnsupported extensions will return the default AbstractSoundInstance.",
                "type": "AbstractSoundInstance"
            },
            "since": "0.4.0",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1363,
            "description": "Stop all audio (global stop). Stopped audio is reset, and not paused. To play audio that has been stopped,\ncall AbstractSoundInstance {{#crossLink \"AbstractSoundInstance/play\"}}{{/crossLink}}.\n\n<h4>Example</h4>\n\n    createjs.Sound.stop();",
            "itemtype": "method",
            "name": "stop",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1381,
            "description": "Set the default playback properties for all new SoundInstances of the passed in src or ID.\nSee {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}} for available properties.",
            "itemtype": "method",
            "name": "setDefaultPlayProps",
            "params": [
                {
                    "name": "src",
                    "description": "The src or ID used to register the audio.",
                    "type": "String"
                },
                {
                    "name": "playProps",
                    "description": "The playback properties you would like to set.",
                    "type": "Object | PlayPropsConfig"
                }
            ],
            "since": "0.6.1",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1395,
            "description": "Get the default playback properties for the passed in src or ID.  These properties are applied to all\nnew SoundInstances.  Returns null if default does not exist.",
            "itemtype": "method",
            "name": "getDefaultPlayProps",
            "params": [
                {
                    "name": "src",
                    "description": "The src or ID used to register the audio.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns an existing PlayPropsConfig or null if one does not exist",
                "type": "PlayPropsConfig"
            },
            "since": "0.6.1",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1413,
            "description": "Play an instance. This is called by the static API, as well as from plugins. This allows the core class to\ncontrol delays.",
            "itemtype": "method",
            "name": "_playInstance",
            "params": [
                {
                    "name": "instance",
                    "description": "The {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} to start playing.",
                    "type": "AbstractSoundInstance"
                },
                {
                    "name": "playProps",
                    "description": "A PlayPropsConfig object.",
                    "type": "PlayPropsConfig"
                }
            ],
            "return": {
                "description": "If the sound can start playing. Sounds that fail immediately will return false. Sounds that\nhave a delay will return true, but may still fail to play.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1450,
            "description": "Begin playback. This is called immediately or after delay by {{#crossLink \"Sound/playInstance\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_beginPlaying",
            "params": [
                {
                    "name": "instance",
                    "description": "A {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} to begin playback.",
                    "type": "AbstractSoundInstance"
                },
                {
                    "name": "playProps",
                    "description": "A PlayPropsConfig object.",
                    "type": "PlayPropsConfig"
                }
            ],
            "return": {
                "description": "If the sound can start playing. If there are no available channels, or the instance fails to\nstart, this will return false.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1473,
            "description": "Get the source of a sound via the ID passed in with a register call. If no ID is found the value is returned\ninstead.",
            "itemtype": "method",
            "name": "_getSrcById",
            "params": [
                {
                    "name": "value",
                    "description": "The ID the sound was registered with.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The source of the sound if it has been registered with this ID or the value that was passed in.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1486,
            "description": "A sound has completed playback, been interrupted, failed, or been stopped. This method removes the instance from\nSound management. It will be added again, if the sound re-plays. Note that this method is called from the\ninstances themselves.",
            "itemtype": "method",
            "name": "_playFinished",
            "params": [
                {
                    "name": "instance",
                    "description": "The instance that finished playback.",
                    "type": "AbstractSoundInstance"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1503,
            "description": "An internal class that manages the number of active {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} instances for\neach sound type. This method is only used internally by the {{#crossLink \"Sound\"}}{{/crossLink}} class.\n\nThe number of sounds is artificially limited by Sound in order to prevent over-saturation of a\nsingle sound, as well as to stay within hardware limitations, although the latter may disappear with better\nbrowser support.\n\nWhen a sound is played, this class ensures that there is an available instance, or interrupts an appropriate\nsound that is already playing.\n#class SoundChannel",
            "params": [
                {
                    "name": "src",
                    "description": "The source of the instances",
                    "type": "String"
                },
                {
                    "name": "max",
                    "description": "The number of instances allowed",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "is_constructor": 1,
            "access": "protected",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1526,
            "description": "A hash of channel instances indexed by source.\n#property channels",
            "type": "{Object}",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1534,
            "description": "Create a sound channel. Note that if the sound channel already exists, this will fail.\n#method create",
            "params": [
                {
                    "name": "src",
                    "description": "The source for the channel",
                    "type": "String"
                },
                {
                    "name": "max",
                    "description": "The maximum amount this channel holds. The default is {{#crossLink \"SoundChannel.maxDefault\"}}{{/crossLink}}.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "If the channels were created.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1550,
            "description": "Delete a sound channel, stop and delete all related instances. Note that if the sound channel does not exist, this will fail.\n#method remove",
            "params": [
                {
                    "name": "src",
                    "description": "The source for the channel",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If the channels were deleted.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1564,
            "description": "Delete all sound channels, stop and delete all related instances.\n#method removeAll",
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1575,
            "description": "Add an instance to a sound channel.\n#method add",
            "params": [
                {
                    "name": "instance",
                    "description": "The instance to add to the channel",
                    "type": "AbstractSoundInstance"
                },
                {
                    "name": "interrupt",
                    "description": "The interrupt value to use. Please see the {{#crossLink \"Sound/play\"}}{{/crossLink}}\nfor details on interrupt modes.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The success of the method call. If the channel is full, it will return false.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1589,
            "description": "Remove an instance from the channel.\n#method remove",
            "params": [
                {
                    "name": "instance",
                    "description": "The instance to remove from the channel",
                    "type": "AbstractSoundInstance"
                }
            ],
            "return": {
                "description": "The success of the method call. If there is no channel, it will return false."
            },
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1602,
            "description": "Get the maximum number of sounds you can have in a channel.\n#method maxPerChannel",
            "return": {
                "description": "The maximum number of sounds you can have in a channel.",
                "type": "Number"
            },
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1610,
            "description": "Get a channel instance by its src.\n#method get",
            "params": [
                {
                    "name": "src",
                    "description": "The src to use to look up the channel",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1623,
            "description": "The source of the channel.\n#property src",
            "type": "{String}",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1630,
            "description": "The maximum number of instances in this channel.  -1 indicates no limit\n#property max",
            "type": "{Number}",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1637,
            "description": "The default value to set for max, if it isn't passed in.  Also used if -1 is passed.\n#property maxDefault",
            "type": "{Number}",
            "default": "100",
            "since": "0.4.0",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1646,
            "description": "The current number of active instances.\n#property length",
            "type": "{Number}",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1653,
            "description": "Initialize the channel.\n#method init",
            "params": [
                {
                    "name": "src",
                    "description": "The source of the channel",
                    "type": "String"
                },
                {
                    "name": "max",
                    "description": "The maximum number of instances in the channel",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1667,
            "description": "Get an instance by index.\n#method get",
            "params": [
                {
                    "name": "index",
                    "description": "The index to return.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The AbstractSoundInstance at a specific instance.",
                "type": "AbstractSoundInstance"
            },
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1677,
            "description": "Add a new instance to the channel.\n#method add",
            "params": [
                {
                    "name": "instance",
                    "description": "The instance to add.",
                    "type": "AbstractSoundInstance"
                }
            ],
            "return": {
                "description": "The success of the method call. If the channel is full, it will return false.",
                "type": "Boolean"
            },
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1690,
            "description": "Remove an instance from the channel, either when it has finished playing, or it has been interrupted.\n#method remove",
            "params": [
                {
                    "name": "instance",
                    "description": "The instance to remove",
                    "type": "AbstractSoundInstance"
                }
            ],
            "return": {
                "description": "The success of the remove call. If the instance is not found in this channel, it will\nreturn false.",
                "type": "Boolean"
            },
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1705,
            "description": "Stop playback and remove all instances from the channel.  Usually in response to a delete call.\n#method removeAll",
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/Sound.js",
            "line": 1716,
            "description": "Get an available slot depending on interrupt value and if slots are available.\n#method getSlot",
            "params": [
                {
                    "name": "interrupt",
                    "description": "The interrupt value to use.",
                    "type": "String"
                },
                {
                    "name": "instance",
                    "description": "The sound instance that will go in the channel if successful.",
                    "type": "AbstractSoundInstance"
                }
            ],
            "return": {
                "description": "Determines if there is an available slot. Depending on the interrupt mode, if there are no slots,\nan existing AbstractSoundInstance may be interrupted. If there are no slots, this method returns false.",
                "type": "Boolean"
            },
            "class": "Sound",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/version.js",
            "line": 16,
            "description": "The version string for this release.",
            "itemtype": "property",
            "name": "version",
            "type": "String",
            "static": 1,
            "class": "SoundJS",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/version.js",
            "line": 24,
            "description": "The build date for this release in UTC format.",
            "itemtype": "property",
            "name": "buildDate",
            "type": "String",
            "static": 1,
            "class": "SoundJS",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/version_cordovaplugin.js",
            "line": 10,
            "description": "The version string for this release.",
            "itemtype": "property",
            "name": "version",
            "type": "String",
            "static": 1,
            "class": "CordovaAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/version_cordovaplugin.js",
            "line": 19,
            "description": "The build date for this release in UTC format.",
            "itemtype": "property",
            "name": "buildDate",
            "type": "String",
            "static": 1,
            "class": "CordovaAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/version_flashplugin.js",
            "line": 10,
            "description": "The version string for this release.",
            "itemtype": "property",
            "name": "version",
            "type": "String",
            "static": 1,
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        },
        {
            "file": "soundjs/version_flashplugin.js",
            "line": 19,
            "description": "The build date for this release in UTC format.",
            "itemtype": "property",
            "name": "buildDate",
            "type": "String",
            "static": 1,
            "class": "FlashAudioPlugin",
            "module": "SoundJS"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " soundjs/cordovaaudio/CordovaAudioPlugin.js:160"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " soundjs/data/PlayPropsConfig.js:147"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " soundjs/Sound.js:520"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " soundjs/Sound.js:588"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " soundjs/Sound.js:830"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " soundjs/Sound.js:1395"
        },
        {
            "message": "Missing item type\nCalled by {{#crossLink \"Sound\"}}{{/crossLink}} when plugin does not handle master volume.\nundoc'd because it is not meant to be used outside of Sound\n#method setMasterVolume",
            "line": " soundjs/cordovaaudio/CordovaAudioSoundInstance.js:108"
        },
        {
            "message": "Missing item type\nCalled by {{#crossLink \"Sound\"}}{{/crossLink}} when plugin does not handle master mute.\nundoc'd because it is not meant to be used outside of Sound\n#method setMasterMute",
            "line": " soundjs/cordovaaudio/CordovaAudioSoundInstance.js:118"
        },
        {
            "message": "Missing item type\nID used to facilitate communication with flash.\nNot doc'd because this should not be altered externally\n#property flashId",
            "line": " soundjs/flashaudio/FlashAudioSoundInstance.js:59"
        },
        {
            "message": "Missing item type\nA reference to the Flash instance that gets created.\n#property flash",
            "line": " soundjs/flashaudio/FlashAudioSoundInstance.js:73"
        },
        {
            "message": "Missing item type\nA list of loader instances that tried to load before _flash was set\n#property _preloadInstances",
            "line": " soundjs/flashaudio/FlashAudioSoundInstance.js:80"
        },
        {
            "message": "Missing item type\nSet the Flash instance on the class, and start loading on any instances that had load called\nbefore flash was ready\n#method setFlash",
            "line": " soundjs/flashaudio/FlashAudioSoundInstance.js:88"
        },
        {
            "message": "Missing item type\nCalled from Flash.  Lets us know flash has finished playing a sound.\n#method handleSoundFinished",
            "line": " soundjs/flashaudio/FlashAudioSoundInstance.js:204"
        },
        {
            "message": "Missing item type\nCalled from Flash.  Lets us know that flash has played a sound to completion and is looping it.\n#method handleSoundLoop",
            "line": " soundjs/flashaudio/FlashAudioSoundInstance.js:214"
        },
        {
            "message": "Missing item type\nCalled by {{#crossLink \"Sound\"}}{{/crossLink}} when plugin does not handle master volume.\nundoc'd because it is not meant to be used outside of Sound\n#method setMasterVolume",
            "line": " soundjs/htmlaudio/HTMLAudioSoundInstance.js:76"
        },
        {
            "message": "Missing item type\nCalled by {{#crossLink \"Sound\"}}{{/crossLink}} when plugin does not handle master mute.\nundoc'd because it is not meant to be used outside of Sound\n#method setMasterMute",
            "line": " soundjs/htmlaudio/HTMLAudioSoundInstance.js:86"
        },
        {
            "message": "Missing item type\nThe TagPool is an object pool for HTMLAudio tag instances.\n#class TagPool",
            "line": " soundjs/htmlaudio/HTMLAudioTagPool.js:154"
        },
        {
            "message": "Missing item type\nA list of all available tags in the pool.\n#property tags",
            "line": " soundjs/htmlaudio/HTMLAudioTagPool.js:163"
        },
        {
            "message": "Missing item type\nGet an HTMLAudioElement for immediate playback. This takes it out of the pool.\n#method get",
            "line": " soundjs/htmlaudio/HTMLAudioTagPool.js:177"
        },
        {
            "message": "Missing item type\nPut an HTMLAudioElement back in the pool for use.\n#method set",
            "line": " soundjs/htmlaudio/HTMLAudioTagPool.js:193"
        },
        {
            "message": "Missing item type\nCreate an HTML audio tag.\n#method _createTag",
            "line": " soundjs/htmlaudio/HTMLAudioTagPool.js:213"
        },
        {
            "message": "Missing item type\nObject hash indexed by the source URI of all created loaders, used to properly destroy them if sources are removed.",
            "line": " soundjs/AbstractPlugin.js:58"
        },
        {
            "message": "Missing item type\nObject hash indexed by the source URI of all created SoundInstances, updates the playbackResource if it loads after they are created,\nand properly destroy them if sources are removed",
            "line": " soundjs/AbstractPlugin.js:75"
        },
        {
            "message": "Missing item type\nA reference to a loader class used by a plugin that must be set.",
            "line": " soundjs/AbstractPlugin.js:92"
        },
        {
            "message": "Missing item type\nA reference to an AbstractSoundInstance class used by a plugin that must be set.",
            "line": " soundjs/AbstractPlugin.js:99"
        },
        {
            "message": "Missing item type\nUse the {{#crossLink \"Sound/capabilities:property\"}}{{/crossLink}} property instead.",
            "line": " soundjs/Sound.js:588"
        },
        {
            "message": "Missing item type\nUsed to dispatch error events from internal preloading.",
            "line": " soundjs/Sound.js:762"
        },
        {
            "message": "Missing item type\nAn internal class that manages the number of active {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} instances for\neach sound type. This method is only used internally by the {{#crossLink \"Sound\"}}{{/crossLink}} class.\n\nThe number of sounds is artificially limited by Sound in order to prevent over-saturation of a\nsingle sound, as well as to stay within hardware limitations, although the latter may disappear with better\nbrowser support.\n\nWhen a sound is played, this class ensures that there is an available instance, or interrupts an appropriate\nsound that is already playing.\n#class SoundChannel",
            "line": " soundjs/Sound.js:1503"
        },
        {
            "message": "Missing item type\nA hash of channel instances indexed by source.\n#property channels",
            "line": " soundjs/Sound.js:1526"
        },
        {
            "message": "Missing item type\nCreate a sound channel. Note that if the sound channel already exists, this will fail.\n#method create",
            "line": " soundjs/Sound.js:1534"
        },
        {
            "message": "Missing item type\nDelete a sound channel, stop and delete all related instances. Note that if the sound channel does not exist, this will fail.\n#method remove",
            "line": " soundjs/Sound.js:1550"
        },
        {
            "message": "Missing item type\nDelete all sound channels, stop and delete all related instances.\n#method removeAll",
            "line": " soundjs/Sound.js:1564"
        },
        {
            "message": "Missing item type\nAdd an instance to a sound channel.\n#method add",
            "line": " soundjs/Sound.js:1575"
        },
        {
            "message": "Missing item type\nRemove an instance from the channel.\n#method remove",
            "line": " soundjs/Sound.js:1589"
        },
        {
            "message": "Missing item type\nGet the maximum number of sounds you can have in a channel.\n#method maxPerChannel",
            "line": " soundjs/Sound.js:1602"
        },
        {
            "message": "Missing item type\nGet a channel instance by its src.\n#method get",
            "line": " soundjs/Sound.js:1610"
        },
        {
            "message": "Missing item type\nThe source of the channel.\n#property src",
            "line": " soundjs/Sound.js:1623"
        },
        {
            "message": "Missing item type\nThe maximum number of instances in this channel.  -1 indicates no limit\n#property max",
            "line": " soundjs/Sound.js:1630"
        },
        {
            "message": "Missing item type\nThe default value to set for max, if it isn't passed in.  Also used if -1 is passed.\n#property maxDefault",
            "line": " soundjs/Sound.js:1637"
        },
        {
            "message": "Missing item type\nThe current number of active instances.\n#property length",
            "line": " soundjs/Sound.js:1646"
        },
        {
            "message": "Missing item type\nInitialize the channel.\n#method init",
            "line": " soundjs/Sound.js:1653"
        },
        {
            "message": "Missing item type\nGet an instance by index.\n#method get",
            "line": " soundjs/Sound.js:1667"
        },
        {
            "message": "Missing item type\nAdd a new instance to the channel.\n#method add",
            "line": " soundjs/Sound.js:1677"
        },
        {
            "message": "Missing item type\nRemove an instance from the channel, either when it has finished playing, or it has been interrupted.\n#method remove",
            "line": " soundjs/Sound.js:1690"
        },
        {
            "message": "Missing item type\nStop playback and remove all instances from the channel.  Usually in response to a delete call.\n#method removeAll",
            "line": " soundjs/Sound.js:1705"
        },
        {
            "message": "Missing item type\nGet an available slot depending on interrupt value and if slots are available.\n#method getSlot",
            "line": " soundjs/Sound.js:1716"
        }
    ]
}